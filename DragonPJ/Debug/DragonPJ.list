
DragonPJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001de0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08001fc4  08001fc4  00011fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080020a4  080020a4  000120a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080020a8  080020a8  000120a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080020ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000070  20000070  0800211c  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000e0  0800211c  000200e0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009fdd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001909  00000000  00000000  0002a076  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000226d  00000000  00000000  0002b97f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004a8  00000000  00000000  0002dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005d8  00000000  00000000  0002e098  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002ce4  00000000  00000000  0002e670  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001ede  00000000  00000000  00031354  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033232  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001364  00000000  00000000  000332b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000084  00000000  00000000  00034614  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000117  00000000  00000000  00034698  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08001fac 	.word	0x08001fac

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08001fac 	.word	0x08001fac

08000224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000224:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <HAL_InitTick+0x3c>)
{
 8000228:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800022a:	7818      	ldrb	r0, [r3, #0]
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	fbb3 f3f0 	udiv	r3, r3, r0
 8000234:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <HAL_InitTick+0x40>)
 8000236:	6810      	ldr	r0, [r2, #0]
 8000238:	fbb0 f0f3 	udiv	r0, r0, r3
 800023c:	f000 f892 	bl	8000364 <HAL_SYSTICK_Config>
 8000240:	4604      	mov	r4, r0
 8000242:	b958      	cbnz	r0, 800025c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000244:	2d0f      	cmp	r5, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	4602      	mov	r2, r0
 800024a:	4629      	mov	r1, r5
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f000 f854 	bl	80002fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <HAL_InitTick+0x44>)
 8000256:	4620      	mov	r0, r4
 8000258:	601d      	str	r5, [r3, #0]
 800025a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800025c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800025e:	bd38      	pop	{r3, r4, r5, pc}
 8000260:	20000000 	.word	0x20000000
 8000264:	20000008 	.word	0x20000008
 8000268:	20000004 	.word	0x20000004

0800026c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <HAL_Init+0x20>)
{
 800026e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000270:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000272:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	f043 0310 	orr.w	r3, r3, #16
 8000278:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800027a:	f000 f82d 	bl	80002d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800027e:	2000      	movs	r0, #0
 8000280:	f7ff ffd0 	bl	8000224 <HAL_InitTick>
  HAL_MspInit();
 8000284:	f000 fe0e 	bl	8000ea4 <HAL_MspInit>
}
 8000288:	2000      	movs	r0, #0
 800028a:	bd08      	pop	{r3, pc}
 800028c:	40022000 	.word	0x40022000

08000290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000290:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <HAL_IncTick+0x10>)
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <HAL_IncTick+0x14>)
 8000294:	6811      	ldr	r1, [r2, #0]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	440b      	add	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000098 	.word	0x20000098
 80002a4:	20000000 	.word	0x20000000

080002a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_GetTick+0x8>)
 80002aa:	6818      	ldr	r0, [r3, #0]
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000098 	.word	0x20000098

080002b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b4:	b538      	push	{r3, r4, r5, lr}
 80002b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff fff6 	bl	80002a8 <HAL_GetTick>
 80002bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002be:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80002c0:	bf1e      	ittt	ne
 80002c2:	4b04      	ldrne	r3, [pc, #16]	; (80002d4 <HAL_Delay+0x20>)
 80002c4:	781b      	ldrbne	r3, [r3, #0]
 80002c6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002c8:	f7ff ffee 	bl	80002a8 <HAL_GetTick>
 80002cc:	1b40      	subs	r0, r0, r5
 80002ce:	4284      	cmp	r4, r0
 80002d0:	d8fa      	bhi.n	80002c8 <HAL_Delay+0x14>
  {
  }
}
 80002d2:	bd38      	pop	{r3, r4, r5, pc}
 80002d4:	20000000 	.word	0x20000000

080002d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002d8:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002da:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002dc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002e6:	041b      	lsls	r3, r3, #16
 80002e8:	0c1b      	lsrs	r3, r3, #16
 80002ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80002f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002f4:	60d3      	str	r3, [r2, #12]
 80002f6:	4770      	bx	lr
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002fe:	b530      	push	{r4, r5, lr}
 8000300:	68dc      	ldr	r4, [r3, #12]
 8000302:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000306:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800030a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030c:	2b04      	cmp	r3, #4
 800030e:	bf28      	it	cs
 8000310:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000312:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000314:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000318:	bf98      	it	ls
 800031a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800031c:	fa05 f303 	lsl.w	r3, r5, r3
 8000320:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000324:	bf88      	it	hi
 8000326:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000328:	4019      	ands	r1, r3
 800032a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800032c:	fa05 f404 	lsl.w	r4, r5, r4
 8000330:	3c01      	subs	r4, #1
 8000332:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000334:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000336:	ea42 0201 	orr.w	r2, r2, r1
 800033a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033e:	bfaf      	iteee	ge
 8000340:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000344:	4b06      	ldrlt	r3, [pc, #24]	; (8000360 <HAL_NVIC_SetPriority+0x64>)
 8000346:	f000 000f 	andlt.w	r0, r0, #15
 800034a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034c:	bfa5      	ittet	ge
 800034e:	b2d2      	uxtbge	r2, r2
 8000350:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000354:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000356:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800035a:	bd30      	pop	{r4, r5, pc}
 800035c:	e000ed00 	.word	0xe000ed00
 8000360:	e000ed14 	.word	0xe000ed14

08000364 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000364:	3801      	subs	r0, #1
 8000366:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800036a:	d20a      	bcs.n	8000382 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000370:	4a06      	ldr	r2, [pc, #24]	; (800038c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000372:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000374:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000378:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800037a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800037c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	e000e010 	.word	0xe000e010
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000394:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000396:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000398:	4f6c      	ldr	r7, [pc, #432]	; (800054c <HAL_GPIO_Init+0x1bc>)
 800039a:	4b6d      	ldr	r3, [pc, #436]	; (8000550 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800039c:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000558 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 80003a0:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 800055c <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 80003a4:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003a8:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80003aa:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003ae:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80003b2:	45a0      	cmp	r8, r4
 80003b4:	f040 8085 	bne.w	80004c2 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 80003b8:	684d      	ldr	r5, [r1, #4]
 80003ba:	2d12      	cmp	r5, #18
 80003bc:	f000 80b7 	beq.w	800052e <HAL_GPIO_Init+0x19e>
 80003c0:	f200 808d 	bhi.w	80004de <HAL_GPIO_Init+0x14e>
 80003c4:	2d02      	cmp	r5, #2
 80003c6:	f000 80af 	beq.w	8000528 <HAL_GPIO_Init+0x198>
 80003ca:	f200 8081 	bhi.w	80004d0 <HAL_GPIO_Init+0x140>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 8091 	beq.w	80004f6 <HAL_GPIO_Init+0x166>
 80003d4:	2d01      	cmp	r5, #1
 80003d6:	f000 80a5 	beq.w	8000524 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003da:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003de:	2cff      	cmp	r4, #255	; 0xff
 80003e0:	bf93      	iteet	ls
 80003e2:	4682      	movls	sl, r0
 80003e4:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003e8:	3d08      	subhi	r5, #8
 80003ea:	f8d0 b000 	ldrls.w	fp, [r0]
 80003ee:	bf92      	itee	ls
 80003f0:	00b5      	lslls	r5, r6, #2
 80003f2:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003f6:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003f8:	fa09 f805 	lsl.w	r8, r9, r5
 80003fc:	ea2b 0808 	bic.w	r8, fp, r8
 8000400:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000404:	bf88      	it	hi
 8000406:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800040a:	ea48 0505 	orr.w	r5, r8, r5
 800040e:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000412:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000416:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800041a:	d052      	beq.n	80004c2 <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800041c:	69bd      	ldr	r5, [r7, #24]
 800041e:	f026 0803 	bic.w	r8, r6, #3
 8000422:	f045 0501 	orr.w	r5, r5, #1
 8000426:	61bd      	str	r5, [r7, #24]
 8000428:	69bd      	ldr	r5, [r7, #24]
 800042a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800042e:	f005 0501 	and.w	r5, r5, #1
 8000432:	9501      	str	r5, [sp, #4]
 8000434:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000438:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800043c:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800043e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000442:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000446:	fa09 f90b 	lsl.w	r9, r9, fp
 800044a:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800044e:	4d41      	ldr	r5, [pc, #260]	; (8000554 <HAL_GPIO_Init+0x1c4>)
 8000450:	42a8      	cmp	r0, r5
 8000452:	d071      	beq.n	8000538 <HAL_GPIO_Init+0x1a8>
 8000454:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000458:	42a8      	cmp	r0, r5
 800045a:	d06f      	beq.n	800053c <HAL_GPIO_Init+0x1ac>
 800045c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000460:	42a8      	cmp	r0, r5
 8000462:	d06d      	beq.n	8000540 <HAL_GPIO_Init+0x1b0>
 8000464:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000468:	42a8      	cmp	r0, r5
 800046a:	d06b      	beq.n	8000544 <HAL_GPIO_Init+0x1b4>
 800046c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000470:	42a8      	cmp	r0, r5
 8000472:	d069      	beq.n	8000548 <HAL_GPIO_Init+0x1b8>
 8000474:	4570      	cmp	r0, lr
 8000476:	bf0c      	ite	eq
 8000478:	2505      	moveq	r5, #5
 800047a:	2506      	movne	r5, #6
 800047c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000480:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000484:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000488:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800048a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800048e:	bf14      	ite	ne
 8000490:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000492:	43a5      	biceq	r5, r4
 8000494:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000496:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000498:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800049c:	bf14      	ite	ne
 800049e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80004a0:	43a5      	biceq	r5, r4
 80004a2:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80004a4:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004a6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80004aa:	bf14      	ite	ne
 80004ac:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80004ae:	43a5      	biceq	r5, r4
 80004b0:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80004b2:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004b4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80004b8:	bf14      	ite	ne
 80004ba:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004bc:	ea25 0404 	biceq.w	r4, r5, r4
 80004c0:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004c2:	3601      	adds	r6, #1
 80004c4:	2e10      	cmp	r6, #16
 80004c6:	f47f af6d 	bne.w	80003a4 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 80004ca:	b003      	add	sp, #12
 80004cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80004d0:	2d03      	cmp	r5, #3
 80004d2:	d025      	beq.n	8000520 <HAL_GPIO_Init+0x190>
 80004d4:	2d11      	cmp	r5, #17
 80004d6:	d180      	bne.n	80003da <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004d8:	68ca      	ldr	r2, [r1, #12]
 80004da:	3204      	adds	r2, #4
          break;
 80004dc:	e77d      	b.n	80003da <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80004de:	4565      	cmp	r5, ip
 80004e0:	d009      	beq.n	80004f6 <HAL_GPIO_Init+0x166>
 80004e2:	d812      	bhi.n	800050a <HAL_GPIO_Init+0x17a>
 80004e4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000560 <HAL_GPIO_Init+0x1d0>
 80004e8:	454d      	cmp	r5, r9
 80004ea:	d004      	beq.n	80004f6 <HAL_GPIO_Init+0x166>
 80004ec:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004f0:	454d      	cmp	r5, r9
 80004f2:	f47f af72 	bne.w	80003da <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004f6:	688a      	ldr	r2, [r1, #8]
 80004f8:	b1e2      	cbz	r2, 8000534 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004fa:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80004fc:	bf0c      	ite	eq
 80004fe:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000502:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000506:	2208      	movs	r2, #8
 8000508:	e767      	b.n	80003da <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800050a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8000564 <HAL_GPIO_Init+0x1d4>
 800050e:	454d      	cmp	r5, r9
 8000510:	d0f1      	beq.n	80004f6 <HAL_GPIO_Init+0x166>
 8000512:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000516:	454d      	cmp	r5, r9
 8000518:	d0ed      	beq.n	80004f6 <HAL_GPIO_Init+0x166>
 800051a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800051e:	e7e7      	b.n	80004f0 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000520:	2200      	movs	r2, #0
 8000522:	e75a      	b.n	80003da <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000524:	68ca      	ldr	r2, [r1, #12]
          break;
 8000526:	e758      	b.n	80003da <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000528:	68ca      	ldr	r2, [r1, #12]
 800052a:	3208      	adds	r2, #8
          break;
 800052c:	e755      	b.n	80003da <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800052e:	68ca      	ldr	r2, [r1, #12]
 8000530:	320c      	adds	r2, #12
          break;
 8000532:	e752      	b.n	80003da <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000534:	2204      	movs	r2, #4
 8000536:	e750      	b.n	80003da <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000538:	2500      	movs	r5, #0
 800053a:	e79f      	b.n	800047c <HAL_GPIO_Init+0xec>
 800053c:	2501      	movs	r5, #1
 800053e:	e79d      	b.n	800047c <HAL_GPIO_Init+0xec>
 8000540:	2502      	movs	r5, #2
 8000542:	e79b      	b.n	800047c <HAL_GPIO_Init+0xec>
 8000544:	2503      	movs	r5, #3
 8000546:	e799      	b.n	800047c <HAL_GPIO_Init+0xec>
 8000548:	2504      	movs	r5, #4
 800054a:	e797      	b.n	800047c <HAL_GPIO_Init+0xec>
 800054c:	40021000 	.word	0x40021000
 8000550:	40010400 	.word	0x40010400
 8000554:	40010800 	.word	0x40010800
 8000558:	40011c00 	.word	0x40011c00
 800055c:	10210000 	.word	0x10210000
 8000560:	10110000 	.word	0x10110000
 8000564:	10310000 	.word	0x10310000

08000568 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000568:	b10a      	cbz	r2, 800056e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800056a:	6101      	str	r1, [r0, #16]
 800056c:	4770      	bx	lr
 800056e:	0409      	lsls	r1, r1, #16
 8000570:	e7fb      	b.n	800056a <HAL_GPIO_WritePin+0x2>

08000572 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000572:	68c3      	ldr	r3, [r0, #12]
 8000574:	4059      	eors	r1, r3
 8000576:	60c1      	str	r1, [r0, #12]
 8000578:	4770      	bx	lr
	...

0800057c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800057c:	6803      	ldr	r3, [r0, #0]
{
 800057e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000582:	07db      	lsls	r3, r3, #31
{
 8000584:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000586:	d410      	bmi.n	80005aa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000588:	682b      	ldr	r3, [r5, #0]
 800058a:	079f      	lsls	r7, r3, #30
 800058c:	d45e      	bmi.n	800064c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800058e:	682b      	ldr	r3, [r5, #0]
 8000590:	0719      	lsls	r1, r3, #28
 8000592:	f100 8095 	bmi.w	80006c0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000596:	682b      	ldr	r3, [r5, #0]
 8000598:	075a      	lsls	r2, r3, #29
 800059a:	f100 80bf 	bmi.w	800071c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800059e:	69ea      	ldr	r2, [r5, #28]
 80005a0:	2a00      	cmp	r2, #0
 80005a2:	f040 812d 	bne.w	8000800 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80005a6:	2000      	movs	r0, #0
 80005a8:	e014      	b.n	80005d4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005aa:	4c90      	ldr	r4, [pc, #576]	; (80007ec <HAL_RCC_OscConfig+0x270>)
 80005ac:	6863      	ldr	r3, [r4, #4]
 80005ae:	f003 030c 	and.w	r3, r3, #12
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d007      	beq.n	80005c6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005b6:	6863      	ldr	r3, [r4, #4]
 80005b8:	f003 030c 	and.w	r3, r3, #12
 80005bc:	2b08      	cmp	r3, #8
 80005be:	d10c      	bne.n	80005da <HAL_RCC_OscConfig+0x5e>
 80005c0:	6863      	ldr	r3, [r4, #4]
 80005c2:	03de      	lsls	r6, r3, #15
 80005c4:	d509      	bpl.n	80005da <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005c6:	6823      	ldr	r3, [r4, #0]
 80005c8:	039c      	lsls	r4, r3, #14
 80005ca:	d5dd      	bpl.n	8000588 <HAL_RCC_OscConfig+0xc>
 80005cc:	686b      	ldr	r3, [r5, #4]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1da      	bne.n	8000588 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005d2:	2001      	movs	r0, #1
}
 80005d4:	b002      	add	sp, #8
 80005d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005da:	686b      	ldr	r3, [r5, #4]
 80005dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005e0:	d110      	bne.n	8000604 <HAL_RCC_OscConfig+0x88>
 80005e2:	6823      	ldr	r3, [r4, #0]
 80005e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005ea:	f7ff fe5d 	bl	80002a8 <HAL_GetTick>
 80005ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005f0:	6823      	ldr	r3, [r4, #0]
 80005f2:	0398      	lsls	r0, r3, #14
 80005f4:	d4c8      	bmi.n	8000588 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005f6:	f7ff fe57 	bl	80002a8 <HAL_GetTick>
 80005fa:	1b80      	subs	r0, r0, r6
 80005fc:	2864      	cmp	r0, #100	; 0x64
 80005fe:	d9f7      	bls.n	80005f0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000600:	2003      	movs	r0, #3
 8000602:	e7e7      	b.n	80005d4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000604:	b99b      	cbnz	r3, 800062e <HAL_RCC_OscConfig+0xb2>
 8000606:	6823      	ldr	r3, [r4, #0]
 8000608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800060c:	6023      	str	r3, [r4, #0]
 800060e:	6823      	ldr	r3, [r4, #0]
 8000610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000614:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000616:	f7ff fe47 	bl	80002a8 <HAL_GetTick>
 800061a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800061c:	6823      	ldr	r3, [r4, #0]
 800061e:	0399      	lsls	r1, r3, #14
 8000620:	d5b2      	bpl.n	8000588 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000622:	f7ff fe41 	bl	80002a8 <HAL_GetTick>
 8000626:	1b80      	subs	r0, r0, r6
 8000628:	2864      	cmp	r0, #100	; 0x64
 800062a:	d9f7      	bls.n	800061c <HAL_RCC_OscConfig+0xa0>
 800062c:	e7e8      	b.n	8000600 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800062e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	d103      	bne.n	800063e <HAL_RCC_OscConfig+0xc2>
 8000636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800063a:	6023      	str	r3, [r4, #0]
 800063c:	e7d1      	b.n	80005e2 <HAL_RCC_OscConfig+0x66>
 800063e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000642:	6023      	str	r3, [r4, #0]
 8000644:	6823      	ldr	r3, [r4, #0]
 8000646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800064a:	e7cd      	b.n	80005e8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800064c:	4c67      	ldr	r4, [pc, #412]	; (80007ec <HAL_RCC_OscConfig+0x270>)
 800064e:	6863      	ldr	r3, [r4, #4]
 8000650:	f013 0f0c 	tst.w	r3, #12
 8000654:	d007      	beq.n	8000666 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000656:	6863      	ldr	r3, [r4, #4]
 8000658:	f003 030c 	and.w	r3, r3, #12
 800065c:	2b08      	cmp	r3, #8
 800065e:	d110      	bne.n	8000682 <HAL_RCC_OscConfig+0x106>
 8000660:	6863      	ldr	r3, [r4, #4]
 8000662:	03da      	lsls	r2, r3, #15
 8000664:	d40d      	bmi.n	8000682 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000666:	6823      	ldr	r3, [r4, #0]
 8000668:	079b      	lsls	r3, r3, #30
 800066a:	d502      	bpl.n	8000672 <HAL_RCC_OscConfig+0xf6>
 800066c:	692b      	ldr	r3, [r5, #16]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d1af      	bne.n	80005d2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000672:	6823      	ldr	r3, [r4, #0]
 8000674:	696a      	ldr	r2, [r5, #20]
 8000676:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800067a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800067e:	6023      	str	r3, [r4, #0]
 8000680:	e785      	b.n	800058e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000682:	692a      	ldr	r2, [r5, #16]
 8000684:	4b5a      	ldr	r3, [pc, #360]	; (80007f0 <HAL_RCC_OscConfig+0x274>)
 8000686:	b16a      	cbz	r2, 80006a4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000688:	2201      	movs	r2, #1
 800068a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800068c:	f7ff fe0c 	bl	80002a8 <HAL_GetTick>
 8000690:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000692:	6823      	ldr	r3, [r4, #0]
 8000694:	079f      	lsls	r7, r3, #30
 8000696:	d4ec      	bmi.n	8000672 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000698:	f7ff fe06 	bl	80002a8 <HAL_GetTick>
 800069c:	1b80      	subs	r0, r0, r6
 800069e:	2802      	cmp	r0, #2
 80006a0:	d9f7      	bls.n	8000692 <HAL_RCC_OscConfig+0x116>
 80006a2:	e7ad      	b.n	8000600 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80006a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006a6:	f7ff fdff 	bl	80002a8 <HAL_GetTick>
 80006aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006ac:	6823      	ldr	r3, [r4, #0]
 80006ae:	0798      	lsls	r0, r3, #30
 80006b0:	f57f af6d 	bpl.w	800058e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006b4:	f7ff fdf8 	bl	80002a8 <HAL_GetTick>
 80006b8:	1b80      	subs	r0, r0, r6
 80006ba:	2802      	cmp	r0, #2
 80006bc:	d9f6      	bls.n	80006ac <HAL_RCC_OscConfig+0x130>
 80006be:	e79f      	b.n	8000600 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006c0:	69aa      	ldr	r2, [r5, #24]
 80006c2:	4c4a      	ldr	r4, [pc, #296]	; (80007ec <HAL_RCC_OscConfig+0x270>)
 80006c4:	4b4b      	ldr	r3, [pc, #300]	; (80007f4 <HAL_RCC_OscConfig+0x278>)
 80006c6:	b1da      	cbz	r2, 8000700 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006cc:	f7ff fdec 	bl	80002a8 <HAL_GetTick>
 80006d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006d4:	079b      	lsls	r3, r3, #30
 80006d6:	d50d      	bpl.n	80006f4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006dc:	4b46      	ldr	r3, [pc, #280]	; (80007f8 <HAL_RCC_OscConfig+0x27c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80006e4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80006e6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80006e8:	9b01      	ldr	r3, [sp, #4]
 80006ea:	1e5a      	subs	r2, r3, #1
 80006ec:	9201      	str	r2, [sp, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1f9      	bne.n	80006e6 <HAL_RCC_OscConfig+0x16a>
 80006f2:	e750      	b.n	8000596 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006f4:	f7ff fdd8 	bl	80002a8 <HAL_GetTick>
 80006f8:	1b80      	subs	r0, r0, r6
 80006fa:	2802      	cmp	r0, #2
 80006fc:	d9e9      	bls.n	80006d2 <HAL_RCC_OscConfig+0x156>
 80006fe:	e77f      	b.n	8000600 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000700:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000702:	f7ff fdd1 	bl	80002a8 <HAL_GetTick>
 8000706:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800070a:	079f      	lsls	r7, r3, #30
 800070c:	f57f af43 	bpl.w	8000596 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000710:	f7ff fdca 	bl	80002a8 <HAL_GetTick>
 8000714:	1b80      	subs	r0, r0, r6
 8000716:	2802      	cmp	r0, #2
 8000718:	d9f6      	bls.n	8000708 <HAL_RCC_OscConfig+0x18c>
 800071a:	e771      	b.n	8000600 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800071c:	4c33      	ldr	r4, [pc, #204]	; (80007ec <HAL_RCC_OscConfig+0x270>)
 800071e:	69e3      	ldr	r3, [r4, #28]
 8000720:	00d8      	lsls	r0, r3, #3
 8000722:	d424      	bmi.n	800076e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000724:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	69e3      	ldr	r3, [r4, #28]
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	61e3      	str	r3, [r4, #28]
 800072e:	69e3      	ldr	r3, [r4, #28]
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000738:	4e30      	ldr	r6, [pc, #192]	; (80007fc <HAL_RCC_OscConfig+0x280>)
 800073a:	6833      	ldr	r3, [r6, #0]
 800073c:	05d9      	lsls	r1, r3, #23
 800073e:	d518      	bpl.n	8000772 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000740:	68eb      	ldr	r3, [r5, #12]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d126      	bne.n	8000794 <HAL_RCC_OscConfig+0x218>
 8000746:	6a23      	ldr	r3, [r4, #32]
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800074e:	f7ff fdab 	bl	80002a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000752:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000756:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000758:	6a23      	ldr	r3, [r4, #32]
 800075a:	079b      	lsls	r3, r3, #30
 800075c:	d53f      	bpl.n	80007de <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800075e:	2f00      	cmp	r7, #0
 8000760:	f43f af1d 	beq.w	800059e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000764:	69e3      	ldr	r3, [r4, #28]
 8000766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800076a:	61e3      	str	r3, [r4, #28]
 800076c:	e717      	b.n	800059e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800076e:	2700      	movs	r7, #0
 8000770:	e7e2      	b.n	8000738 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000772:	6833      	ldr	r3, [r6, #0]
 8000774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000778:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800077a:	f7ff fd95 	bl	80002a8 <HAL_GetTick>
 800077e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000780:	6833      	ldr	r3, [r6, #0]
 8000782:	05da      	lsls	r2, r3, #23
 8000784:	d4dc      	bmi.n	8000740 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000786:	f7ff fd8f 	bl	80002a8 <HAL_GetTick>
 800078a:	eba0 0008 	sub.w	r0, r0, r8
 800078e:	2864      	cmp	r0, #100	; 0x64
 8000790:	d9f6      	bls.n	8000780 <HAL_RCC_OscConfig+0x204>
 8000792:	e735      	b.n	8000600 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000794:	b9ab      	cbnz	r3, 80007c2 <HAL_RCC_OscConfig+0x246>
 8000796:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000798:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800079c:	f023 0301 	bic.w	r3, r3, #1
 80007a0:	6223      	str	r3, [r4, #32]
 80007a2:	6a23      	ldr	r3, [r4, #32]
 80007a4:	f023 0304 	bic.w	r3, r3, #4
 80007a8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007aa:	f7ff fd7d 	bl	80002a8 <HAL_GetTick>
 80007ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007b0:	6a23      	ldr	r3, [r4, #32]
 80007b2:	0798      	lsls	r0, r3, #30
 80007b4:	d5d3      	bpl.n	800075e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007b6:	f7ff fd77 	bl	80002a8 <HAL_GetTick>
 80007ba:	1b80      	subs	r0, r0, r6
 80007bc:	4540      	cmp	r0, r8
 80007be:	d9f7      	bls.n	80007b0 <HAL_RCC_OscConfig+0x234>
 80007c0:	e71e      	b.n	8000600 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007c2:	2b05      	cmp	r3, #5
 80007c4:	6a23      	ldr	r3, [r4, #32]
 80007c6:	d103      	bne.n	80007d0 <HAL_RCC_OscConfig+0x254>
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6223      	str	r3, [r4, #32]
 80007ce:	e7ba      	b.n	8000746 <HAL_RCC_OscConfig+0x1ca>
 80007d0:	f023 0301 	bic.w	r3, r3, #1
 80007d4:	6223      	str	r3, [r4, #32]
 80007d6:	6a23      	ldr	r3, [r4, #32]
 80007d8:	f023 0304 	bic.w	r3, r3, #4
 80007dc:	e7b6      	b.n	800074c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007de:	f7ff fd63 	bl	80002a8 <HAL_GetTick>
 80007e2:	eba0 0008 	sub.w	r0, r0, r8
 80007e6:	42b0      	cmp	r0, r6
 80007e8:	d9b6      	bls.n	8000758 <HAL_RCC_OscConfig+0x1dc>
 80007ea:	e709      	b.n	8000600 <HAL_RCC_OscConfig+0x84>
 80007ec:	40021000 	.word	0x40021000
 80007f0:	42420000 	.word	0x42420000
 80007f4:	42420480 	.word	0x42420480
 80007f8:	20000008 	.word	0x20000008
 80007fc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000800:	4c22      	ldr	r4, [pc, #136]	; (800088c <HAL_RCC_OscConfig+0x310>)
 8000802:	6863      	ldr	r3, [r4, #4]
 8000804:	f003 030c 	and.w	r3, r3, #12
 8000808:	2b08      	cmp	r3, #8
 800080a:	f43f aee2 	beq.w	80005d2 <HAL_RCC_OscConfig+0x56>
 800080e:	2300      	movs	r3, #0
 8000810:	4e1f      	ldr	r6, [pc, #124]	; (8000890 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000812:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000814:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000816:	d12b      	bne.n	8000870 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000818:	f7ff fd46 	bl	80002a8 <HAL_GetTick>
 800081c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800081e:	6823      	ldr	r3, [r4, #0]
 8000820:	0199      	lsls	r1, r3, #6
 8000822:	d41f      	bmi.n	8000864 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000824:	6a2b      	ldr	r3, [r5, #32]
 8000826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800082a:	d105      	bne.n	8000838 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800082c:	6862      	ldr	r2, [r4, #4]
 800082e:	68a9      	ldr	r1, [r5, #8]
 8000830:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000834:	430a      	orrs	r2, r1
 8000836:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000838:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800083a:	6862      	ldr	r2, [r4, #4]
 800083c:	430b      	orrs	r3, r1
 800083e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000842:	4313      	orrs	r3, r2
 8000844:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000846:	2301      	movs	r3, #1
 8000848:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800084a:	f7ff fd2d 	bl	80002a8 <HAL_GetTick>
 800084e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	019a      	lsls	r2, r3, #6
 8000854:	f53f aea7 	bmi.w	80005a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000858:	f7ff fd26 	bl	80002a8 <HAL_GetTick>
 800085c:	1b40      	subs	r0, r0, r5
 800085e:	2802      	cmp	r0, #2
 8000860:	d9f6      	bls.n	8000850 <HAL_RCC_OscConfig+0x2d4>
 8000862:	e6cd      	b.n	8000600 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000864:	f7ff fd20 	bl	80002a8 <HAL_GetTick>
 8000868:	1bc0      	subs	r0, r0, r7
 800086a:	2802      	cmp	r0, #2
 800086c:	d9d7      	bls.n	800081e <HAL_RCC_OscConfig+0x2a2>
 800086e:	e6c7      	b.n	8000600 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000870:	f7ff fd1a 	bl	80002a8 <HAL_GetTick>
 8000874:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000876:	6823      	ldr	r3, [r4, #0]
 8000878:	019b      	lsls	r3, r3, #6
 800087a:	f57f ae94 	bpl.w	80005a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800087e:	f7ff fd13 	bl	80002a8 <HAL_GetTick>
 8000882:	1b40      	subs	r0, r0, r5
 8000884:	2802      	cmp	r0, #2
 8000886:	d9f6      	bls.n	8000876 <HAL_RCC_OscConfig+0x2fa>
 8000888:	e6ba      	b.n	8000600 <HAL_RCC_OscConfig+0x84>
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	42420060 	.word	0x42420060

08000894 <HAL_RCC_GetSysClockFreq>:
{
 8000894:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000898:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800089a:	ac02      	add	r4, sp, #8
 800089c:	f103 0510 	add.w	r5, r3, #16
 80008a0:	4622      	mov	r2, r4
 80008a2:	6818      	ldr	r0, [r3, #0]
 80008a4:	6859      	ldr	r1, [r3, #4]
 80008a6:	3308      	adds	r3, #8
 80008a8:	c203      	stmia	r2!, {r0, r1}
 80008aa:	42ab      	cmp	r3, r5
 80008ac:	4614      	mov	r4, r2
 80008ae:	d1f7      	bne.n	80008a0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80008b0:	2301      	movs	r3, #1
 80008b2:	f88d 3004 	strb.w	r3, [sp, #4]
 80008b6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80008b8:	4911      	ldr	r1, [pc, #68]	; (8000900 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80008ba:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80008be:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008c0:	f003 020c 	and.w	r2, r3, #12
 80008c4:	2a08      	cmp	r2, #8
 80008c6:	d117      	bne.n	80008f8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008c8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80008cc:	a806      	add	r0, sp, #24
 80008ce:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008d0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008d2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008d6:	d50c      	bpl.n	80008f2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008d8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008da:	480a      	ldr	r0, [pc, #40]	; (8000904 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008dc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008e0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008e2:	aa06      	add	r2, sp, #24
 80008e4:	4413      	add	r3, r2
 80008e6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008ea:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80008ee:	b007      	add	sp, #28
 80008f0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <HAL_RCC_GetSysClockFreq+0x74>)
 80008f4:	4350      	muls	r0, r2
 80008f6:	e7fa      	b.n	80008ee <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80008fa:	e7f8      	b.n	80008ee <HAL_RCC_GetSysClockFreq+0x5a>
 80008fc:	08001fc4 	.word	0x08001fc4
 8000900:	40021000 	.word	0x40021000
 8000904:	007a1200 	.word	0x007a1200
 8000908:	003d0900 	.word	0x003d0900

0800090c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800090c:	4a54      	ldr	r2, [pc, #336]	; (8000a60 <HAL_RCC_ClockConfig+0x154>)
{
 800090e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000912:	6813      	ldr	r3, [r2, #0]
{
 8000914:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	428b      	cmp	r3, r1
{
 800091c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800091e:	d32a      	bcc.n	8000976 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000920:	6829      	ldr	r1, [r5, #0]
 8000922:	078c      	lsls	r4, r1, #30
 8000924:	d434      	bmi.n	8000990 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000926:	07ca      	lsls	r2, r1, #31
 8000928:	d447      	bmi.n	80009ba <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800092a:	4a4d      	ldr	r2, [pc, #308]	; (8000a60 <HAL_RCC_ClockConfig+0x154>)
 800092c:	6813      	ldr	r3, [r2, #0]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	429e      	cmp	r6, r3
 8000934:	f0c0 8082 	bcc.w	8000a3c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000938:	682a      	ldr	r2, [r5, #0]
 800093a:	4c4a      	ldr	r4, [pc, #296]	; (8000a64 <HAL_RCC_ClockConfig+0x158>)
 800093c:	f012 0f04 	tst.w	r2, #4
 8000940:	f040 8087 	bne.w	8000a52 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000944:	0713      	lsls	r3, r2, #28
 8000946:	d506      	bpl.n	8000956 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000948:	6863      	ldr	r3, [r4, #4]
 800094a:	692a      	ldr	r2, [r5, #16]
 800094c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000950:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000954:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000956:	f7ff ff9d 	bl	8000894 <HAL_RCC_GetSysClockFreq>
 800095a:	6863      	ldr	r3, [r4, #4]
 800095c:	4a42      	ldr	r2, [pc, #264]	; (8000a68 <HAL_RCC_ClockConfig+0x15c>)
 800095e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000962:	5cd3      	ldrb	r3, [r2, r3]
 8000964:	40d8      	lsrs	r0, r3
 8000966:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <HAL_RCC_ClockConfig+0x160>)
 8000968:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fc5a 	bl	8000224 <HAL_InitTick>
  return HAL_OK;
 8000970:	2000      	movs	r0, #0
}
 8000972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000976:	6813      	ldr	r3, [r2, #0]
 8000978:	f023 0307 	bic.w	r3, r3, #7
 800097c:	430b      	orrs	r3, r1
 800097e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000980:	6813      	ldr	r3, [r2, #0]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	4299      	cmp	r1, r3
 8000988:	d0ca      	beq.n	8000920 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800098a:	2001      	movs	r0, #1
 800098c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000990:	4b34      	ldr	r3, [pc, #208]	; (8000a64 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000992:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000996:	bf1e      	ittt	ne
 8000998:	685a      	ldrne	r2, [r3, #4]
 800099a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800099e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009a0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80009a2:	bf42      	ittt	mi
 80009a4:	685a      	ldrmi	r2, [r3, #4]
 80009a6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80009aa:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	68a8      	ldr	r0, [r5, #8]
 80009b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80009b4:	4302      	orrs	r2, r0
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	e7b5      	b.n	8000926 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009ba:	686a      	ldr	r2, [r5, #4]
 80009bc:	4c29      	ldr	r4, [pc, #164]	; (8000a64 <HAL_RCC_ClockConfig+0x158>)
 80009be:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009c0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009c2:	d11c      	bne.n	80009fe <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009c8:	d0df      	beq.n	800098a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009ca:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009cc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009d0:	f023 0303 	bic.w	r3, r3, #3
 80009d4:	4313      	orrs	r3, r2
 80009d6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80009d8:	f7ff fc66 	bl	80002a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009dc:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80009de:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d114      	bne.n	8000a0e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009e4:	6863      	ldr	r3, [r4, #4]
 80009e6:	f003 030c 	and.w	r3, r3, #12
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	d09d      	beq.n	800092a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ee:	f7ff fc5b 	bl	80002a8 <HAL_GetTick>
 80009f2:	1bc0      	subs	r0, r0, r7
 80009f4:	4540      	cmp	r0, r8
 80009f6:	d9f5      	bls.n	80009e4 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80009f8:	2003      	movs	r0, #3
 80009fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009fe:	2a02      	cmp	r2, #2
 8000a00:	d102      	bne.n	8000a08 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a02:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a06:	e7df      	b.n	80009c8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a08:	f013 0f02 	tst.w	r3, #2
 8000a0c:	e7dc      	b.n	80009c8 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d10f      	bne.n	8000a32 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a12:	6863      	ldr	r3, [r4, #4]
 8000a14:	f003 030c 	and.w	r3, r3, #12
 8000a18:	2b08      	cmp	r3, #8
 8000a1a:	d086      	beq.n	800092a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a1c:	f7ff fc44 	bl	80002a8 <HAL_GetTick>
 8000a20:	1bc0      	subs	r0, r0, r7
 8000a22:	4540      	cmp	r0, r8
 8000a24:	d9f5      	bls.n	8000a12 <HAL_RCC_ClockConfig+0x106>
 8000a26:	e7e7      	b.n	80009f8 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a28:	f7ff fc3e 	bl	80002a8 <HAL_GetTick>
 8000a2c:	1bc0      	subs	r0, r0, r7
 8000a2e:	4540      	cmp	r0, r8
 8000a30:	d8e2      	bhi.n	80009f8 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a32:	6863      	ldr	r3, [r4, #4]
 8000a34:	f013 0f0c 	tst.w	r3, #12
 8000a38:	d1f6      	bne.n	8000a28 <HAL_RCC_ClockConfig+0x11c>
 8000a3a:	e776      	b.n	800092a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a3c:	6813      	ldr	r3, [r2, #0]
 8000a3e:	f023 0307 	bic.w	r3, r3, #7
 8000a42:	4333      	orrs	r3, r6
 8000a44:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a46:	6813      	ldr	r3, [r2, #0]
 8000a48:	f003 0307 	and.w	r3, r3, #7
 8000a4c:	429e      	cmp	r6, r3
 8000a4e:	d19c      	bne.n	800098a <HAL_RCC_ClockConfig+0x7e>
 8000a50:	e772      	b.n	8000938 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a52:	6863      	ldr	r3, [r4, #4]
 8000a54:	68e9      	ldr	r1, [r5, #12]
 8000a56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	6063      	str	r3, [r4, #4]
 8000a5e:	e771      	b.n	8000944 <HAL_RCC_ClockConfig+0x38>
 8000a60:	40022000 	.word	0x40022000
 8000a64:	40021000 	.word	0x40021000
 8000a68:	08001ff2 	.word	0x08001ff2
 8000a6c:	20000008 	.word	0x20000008

08000a70 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000a7a:	5cd3      	ldrb	r3, [r2, r3]
 8000a7c:	4a03      	ldr	r2, [pc, #12]	; (8000a8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a7e:	6810      	ldr	r0, [r2, #0]
}    
 8000a80:	40d8      	lsrs	r0, r3
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000
 8000a88:	08002002 	.word	0x08002002
 8000a8c:	20000008 	.word	0x20000008

08000a90 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000a9a:	5cd3      	ldrb	r3, [r2, r3]
 8000a9c:	4a03      	ldr	r2, [pc, #12]	; (8000aac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a9e:	6810      	ldr	r0, [r2, #0]
} 
 8000aa0:	40d8      	lsrs	r0, r3
 8000aa2:	4770      	bx	lr
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	08002002 	.word	0x08002002
 8000aac:	20000008 	.word	0x20000008

08000ab0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ab4:	6805      	ldr	r5, [r0, #0]
 8000ab6:	68c2      	ldr	r2, [r0, #12]
 8000ab8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000aba:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000abc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ac4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000ac6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ac8:	430b      	orrs	r3, r1
 8000aca:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000acc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000ad0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ad4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000ada:	696b      	ldr	r3, [r5, #20]
 8000adc:	6982      	ldr	r2, [r0, #24]
 8000ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000ae6:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <UART_SetConfig+0x138>)
{
 8000ae8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000aea:	429d      	cmp	r5, r3
 8000aec:	f04f 0419 	mov.w	r4, #25
 8000af0:	d146      	bne.n	8000b80 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000af2:	f7ff ffcd 	bl	8000a90 <HAL_RCC_GetPCLK2Freq>
 8000af6:	fb04 f300 	mul.w	r3, r4, r0
 8000afa:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000afe:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000b02:	00b6      	lsls	r6, r6, #2
 8000b04:	fbb3 f3f6 	udiv	r3, r3, r6
 8000b08:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b0c:	011e      	lsls	r6, r3, #4
 8000b0e:	f7ff ffbf 	bl	8000a90 <HAL_RCC_GetPCLK2Freq>
 8000b12:	4360      	muls	r0, r4
 8000b14:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	fbb0 f7f3 	udiv	r7, r0, r3
 8000b1e:	f7ff ffb7 	bl	8000a90 <HAL_RCC_GetPCLK2Freq>
 8000b22:	4360      	muls	r0, r4
 8000b24:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b2e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b32:	fb08 7313 	mls	r3, r8, r3, r7
 8000b36:	011b      	lsls	r3, r3, #4
 8000b38:	3332      	adds	r3, #50	; 0x32
 8000b3a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b3e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000b42:	f7ff ffa5 	bl	8000a90 <HAL_RCC_GetPCLK2Freq>
 8000b46:	4360      	muls	r0, r4
 8000b48:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	fbb0 faf2 	udiv	sl, r0, r2
 8000b52:	f7ff ff9d 	bl	8000a90 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000b56:	4360      	muls	r0, r4
 8000b58:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b62:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b66:	fb08 a313 	mls	r3, r8, r3, sl
 8000b6a:	011b      	lsls	r3, r3, #4
 8000b6c:	3332      	adds	r3, #50	; 0x32
 8000b6e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	433b      	orrs	r3, r7
 8000b78:	4433      	add	r3, r6
 8000b7a:	60ab      	str	r3, [r5, #8]
 8000b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b80:	f7ff ff76 	bl	8000a70 <HAL_RCC_GetPCLK1Freq>
 8000b84:	fb04 f300 	mul.w	r3, r4, r0
 8000b88:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000b8c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000b90:	00b6      	lsls	r6, r6, #2
 8000b92:	fbb3 f3f6 	udiv	r3, r3, r6
 8000b96:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b9a:	011e      	lsls	r6, r3, #4
 8000b9c:	f7ff ff68 	bl	8000a70 <HAL_RCC_GetPCLK1Freq>
 8000ba0:	4360      	muls	r0, r4
 8000ba2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	fbb0 f7f3 	udiv	r7, r0, r3
 8000bac:	f7ff ff60 	bl	8000a70 <HAL_RCC_GetPCLK1Freq>
 8000bb0:	4360      	muls	r0, r4
 8000bb2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bbc:	fbb3 f3f8 	udiv	r3, r3, r8
 8000bc0:	fb08 7313 	mls	r3, r8, r3, r7
 8000bc4:	011b      	lsls	r3, r3, #4
 8000bc6:	3332      	adds	r3, #50	; 0x32
 8000bc8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000bcc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000bd0:	f7ff ff4e 	bl	8000a70 <HAL_RCC_GetPCLK1Freq>
 8000bd4:	4360      	muls	r0, r4
 8000bd6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000bda:	0092      	lsls	r2, r2, #2
 8000bdc:	fbb0 faf2 	udiv	sl, r0, r2
 8000be0:	f7ff ff46 	bl	8000a70 <HAL_RCC_GetPCLK1Freq>
 8000be4:	e7b7      	b.n	8000b56 <UART_SetConfig+0xa6>
 8000be6:	bf00      	nop
 8000be8:	40013800 	.word	0x40013800

08000bec <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bee:	4604      	mov	r4, r0
 8000bf0:	460e      	mov	r6, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000bf6:	6821      	ldr	r1, [r4, #0]
 8000bf8:	680b      	ldr	r3, [r1, #0]
 8000bfa:	ea36 0303 	bics.w	r3, r6, r3
 8000bfe:	d101      	bne.n	8000c04 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000c00:	2000      	movs	r0, #0
}
 8000c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000c04:	1c6b      	adds	r3, r5, #1
 8000c06:	d0f7      	beq.n	8000bf8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c08:	b995      	cbnz	r5, 8000c30 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000c0a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000c0c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000c14:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000c16:	695a      	ldr	r2, [r3, #20]
 8000c18:	f022 0201 	bic.w	r2, r2, #1
 8000c1c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000c1e:	2320      	movs	r3, #32
 8000c20:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000c24:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c30:	f7ff fb3a 	bl	80002a8 <HAL_GetTick>
 8000c34:	1bc0      	subs	r0, r0, r7
 8000c36:	4285      	cmp	r5, r0
 8000c38:	d2dd      	bcs.n	8000bf6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000c3a:	e7e6      	b.n	8000c0a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000c3c <HAL_UART_Init>:
{
 8000c3c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000c3e:	4604      	mov	r4, r0
 8000c40:	b340      	cbz	r0, 8000c94 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000c42:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000c46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c4a:	b91b      	cbnz	r3, 8000c54 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000c4c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000c50:	f000 f94a 	bl	8000ee8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000c54:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000c56:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000c58:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000c5c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c5e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000c60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c64:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c66:	f7ff ff23 	bl	8000ab0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c6a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c6c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c6e:	691a      	ldr	r2, [r3, #16]
 8000c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c76:	695a      	ldr	r2, [r3, #20]
 8000c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c7c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000c7e:	68da      	ldr	r2, [r3, #12]
 8000c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c84:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000c86:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c88:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000c8a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000c8e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000c92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c94:	2001      	movs	r0, #1
}
 8000c96:	bd10      	pop	{r4, pc}

08000c98 <HAL_UART_Transmit>:
{
 8000c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c9c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000c9e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000ca2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000ca4:	2b20      	cmp	r3, #32
{
 8000ca6:	460d      	mov	r5, r1
 8000ca8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000caa:	d14e      	bne.n	8000d4a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d049      	beq.n	8000d44 <HAL_UART_Transmit+0xac>
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	d047      	beq.n	8000d44 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000cb4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d046      	beq.n	8000d4a <HAL_UART_Transmit+0xb2>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000cc6:	2321      	movs	r3, #33	; 0x21
 8000cc8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000ccc:	f7ff faec 	bl	80002a8 <HAL_GetTick>
 8000cd0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000cd2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000cd6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000cda:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b96b      	cbnz	r3, 8000cfc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4632      	mov	r2, r6
 8000ce4:	2140      	movs	r1, #64	; 0x40
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	f7ff ff80 	bl	8000bec <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000cec:	b9a8      	cbnz	r0, 8000d1a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000cee:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000cf0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000cf4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000cfc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cfe:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000d00:	3b01      	subs	r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d06:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d08:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d0e:	4620      	mov	r0, r4
 8000d10:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d12:	d10e      	bne.n	8000d32 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d14:	f7ff ff6a 	bl	8000bec <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d18:	b110      	cbz	r0, 8000d20 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000d20:	882b      	ldrh	r3, [r5, #0]
 8000d22:	6822      	ldr	r2, [r4, #0]
 8000d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d28:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d2a:	6923      	ldr	r3, [r4, #16]
 8000d2c:	b943      	cbnz	r3, 8000d40 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000d2e:	3502      	adds	r5, #2
 8000d30:	e7d3      	b.n	8000cda <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d32:	f7ff ff5b 	bl	8000bec <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d36:	2800      	cmp	r0, #0
 8000d38:	d1ef      	bne.n	8000d1a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	782a      	ldrb	r2, [r5, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	3501      	adds	r5, #1
 8000d42:	e7ca      	b.n	8000cda <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000d44:	2001      	movs	r0, #1
 8000d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000d4a:	2002      	movs	r0, #2
}
 8000d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d50 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#ifdef __GNUC__
int _write(int file, uint8_t *ptr, int len)
{
 8000d50:	b510      	push	{r4, lr}
 8000d52:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart1, ptr, len, 1000);
 8000d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d58:	b292      	uxth	r2, r2
 8000d5a:	4802      	ldr	r0, [pc, #8]	; (8000d64 <_write+0x14>)
 8000d5c:	f7ff ff9c 	bl	8000c98 <HAL_UART_Transmit>
	return len;
}
 8000d60:	4620      	mov	r0, r4
 8000d62:	bd10      	pop	{r4, pc}
 8000d64:	2000009c 	.word	0x2000009c

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b510      	push	{r4, lr}
 8000d6a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6c:	2228      	movs	r2, #40	; 0x28
 8000d6e:	2100      	movs	r1, #0
 8000d70:	a806      	add	r0, sp, #24
 8000d72:	f000 f975 	bl	8001060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d76:	2214      	movs	r2, #20
 8000d78:	2100      	movs	r1, #0
 8000d7a:	a801      	add	r0, sp, #4
 8000d7c:	f000 f970 	bl	8001060 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d84:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d86:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d88:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d8c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d90:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d92:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d94:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d96:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d98:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	f7ff fbef 	bl	800057c <HAL_RCC_OscConfig>
 8000d9e:	b100      	cbz	r0, 8000da2 <SystemClock_Config+0x3a>
 8000da0:	e7fe      	b.n	8000da0 <SystemClock_Config+0x38>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da2:	230f      	movs	r3, #15
 8000da4:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000daa:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dac:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dae:	4621      	mov	r1, r4
 8000db0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db2:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000db4:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db6:	f7ff fda9 	bl	800090c <HAL_RCC_ClockConfig>
 8000dba:	b100      	cbz	r0, 8000dbe <SystemClock_Config+0x56>
 8000dbc:	e7fe      	b.n	8000dbc <SystemClock_Config+0x54>
  {
    Error_Handler();
  }
}
 8000dbe:	b010      	add	sp, #64	; 0x40
 8000dc0:	bd10      	pop	{r4, pc}
	...

08000dc4 <main>:
{
 8000dc4:	b500      	push	{lr}
 8000dc6:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000dc8:	f7ff fa50 	bl	800026c <HAL_Init>
  SystemClock_Config();
 8000dcc:	f7ff ffcc 	bl	8000d68 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	2210      	movs	r2, #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	eb0d 0002 	add.w	r0, sp, r2
 8000dd8:	f000 f942 	bl	8001060 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <main+0xc8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000dde:	211c      	movs	r1, #28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000de2:	482b      	ldr	r0, [pc, #172]	; (8000e90 <main+0xcc>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000de8:	619a      	str	r2, [r3, #24]
 8000dea:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2400      	movs	r4, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dee:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000df2:	9201      	str	r2, [sp, #4]
 8000df4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	699a      	ldr	r2, [r3, #24]
 8000df8:	f042 0204 	orr.w	r2, r2, #4
 8000dfc:	619a      	str	r2, [r3, #24]
 8000dfe:	699a      	ldr	r2, [r3, #24]
 8000e00:	f002 0204 	and.w	r2, r2, #4
 8000e04:	9202      	str	r2, [sp, #8]
 8000e06:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e08:	699a      	ldr	r2, [r3, #24]
 8000e0a:	f042 0208 	orr.w	r2, r2, #8
 8000e0e:	619a      	str	r2, [r3, #24]
 8000e10:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	f003 0308 	and.w	r3, r3, #8
 8000e18:	9303      	str	r3, [sp, #12]
 8000e1a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000e1c:	f7ff fba4 	bl	8000568 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000e20:	231c      	movs	r3, #28
 8000e22:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2a:	4819      	ldr	r0, [pc, #100]	; (8000e90 <main+0xcc>)
 8000e2c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e32:	f7ff faad 	bl	8000390 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 9600;
 8000e36:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 8000e3a:	4816      	ldr	r0, [pc, #88]	; (8000e94 <main+0xd0>)
  huart1.Init.BaudRate = 9600;
 8000e3c:	4a16      	ldr	r2, [pc, #88]	; (8000e98 <main+0xd4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 9600;
 8000e40:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e44:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e46:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e48:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e4a:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4c:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e50:	f7ff fef4 	bl	8000c3c <HAL_UART_Init>
 8000e54:	b100      	cbz	r0, 8000e58 <main+0x94>
 8000e56:	e7fe      	b.n	8000e56 <main+0x92>
  printf("USART_Main Run Test! \r\n");
 8000e58:	4810      	ldr	r0, [pc, #64]	; (8000e9c <main+0xd8>)
 8000e5a:	f000 f97d 	bl	8001158 <puts>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000e5e:	4c0c      	ldr	r4, [pc, #48]	; (8000e90 <main+0xcc>)
	  printf("Hellow");
 8000e60:	4d0f      	ldr	r5, [pc, #60]	; (8000ea0 <main+0xdc>)
	  HAL_Delay(1000);
 8000e62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e66:	f7ff fa25 	bl	80002b4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	f7ff fb80 	bl	8000572 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000e72:	4620      	mov	r0, r4
 8000e74:	2108      	movs	r1, #8
 8000e76:	f7ff fb7c 	bl	8000572 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	f7ff fb78 	bl	8000572 <HAL_GPIO_TogglePin>
	  printf("Hellow");
 8000e82:	4628      	mov	r0, r5
 8000e84:	f000 f8f4 	bl	8001070 <iprintf>
 8000e88:	e7eb      	b.n	8000e62 <main+0x9e>
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40011800 	.word	0x40011800
 8000e94:	2000009c 	.word	0x2000009c
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	08001fd4 	.word	0x08001fd4
 8000ea0:	08001feb 	.word	0x08001feb

08000ea4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_MspInit+0x3c>)
{
 8000ea6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea8:	699a      	ldr	r2, [r3, #24]
 8000eaa:	f042 0201 	orr.w	r2, r2, #1
 8000eae:	619a      	str	r2, [r3, #24]
 8000eb0:	699a      	ldr	r2, [r3, #24]
 8000eb2:	f002 0201 	and.w	r2, r2, #1
 8000eb6:	9200      	str	r2, [sp, #0]
 8000eb8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	69da      	ldr	r2, [r3, #28]
 8000ebc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ec0:	61da      	str	r2, [r3, #28]
 8000ec2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ece:	6853      	ldr	r3, [r2, #4]
 8000ed0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ed4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	b002      	add	sp, #8
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010000 	.word	0x40010000

08000ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b510      	push	{r4, lr}
 8000eea:	4604      	mov	r4, r0
 8000eec:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	2210      	movs	r2, #16
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	a802      	add	r0, sp, #8
 8000ef4:	f000 f8b4 	bl	8001060 <memset>
  if(huart->Instance==USART1)
 8000ef8:	6822      	ldr	r2, [r4, #0]
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_UART_MspInit+0x78>)
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d12d      	bne.n	8000f5c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f00:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000f04:	699a      	ldr	r2, [r3, #24]
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f06:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f0c:	619a      	str	r2, [r3, #24]
 8000f0e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	4814      	ldr	r0, [pc, #80]	; (8000f64 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f12:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f16:	9200      	str	r2, [sp, #0]
 8000f18:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	699a      	ldr	r2, [r3, #24]
 8000f1c:	f042 0208 	orr.w	r2, r2, #8
 8000f20:	619a      	str	r2, [r3, #24]
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0308 	and.w	r3, r3, #8
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f2c:	2340      	movs	r3, #64	; 0x40
 8000f2e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f7ff fa2a 	bl	8000390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	a902      	add	r1, sp, #8
 8000f44:	4807      	ldr	r0, [pc, #28]	; (8000f64 <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f46:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f7ff fa21 	bl	8000390 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000f4e:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_UART_MspInit+0x80>)
 8000f50:	6853      	ldr	r3, [r2, #4]
 8000f52:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f5c:	b006      	add	sp, #24
 8000f5e:	bd10      	pop	{r4, pc}
 8000f60:	40013800 	.word	0x40013800
 8000f64:	40010c00 	.word	0x40010c00
 8000f68:	40010000 	.word	0x40010000

08000f6c <NMI_Handler>:
 8000f6c:	4770      	bx	lr

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler>

08000f76 <SVC_Handler>:
 8000f76:	4770      	bx	lr

08000f78 <DebugMon_Handler>:
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	4770      	bx	lr

08000f7c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7c:	f7ff b988 	b.w	8000290 <HAL_IncTick>

08000f80 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <SystemInit+0x40>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	f042 0201 	orr.w	r2, r2, #1
 8000f88:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000f8a:	6859      	ldr	r1, [r3, #4]
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <SystemInit+0x44>)
 8000f8e:	400a      	ands	r2, r1
 8000f90:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000f98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f9c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fa4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000fac:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000fae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000fb2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000fb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <SystemInit+0x48>)
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	f8ff0000 	.word	0xf8ff0000
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fcc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000fce:	e003      	b.n	8000fd8 <LoopCopyDataInit>

08000fd0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000fd2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fd4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fd6:	3104      	adds	r1, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fd8:	480a      	ldr	r0, [pc, #40]	; (8001004 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fdc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fde:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fe0:	d3f6      	bcc.n	8000fd0 <CopyDataInit>
  ldr r2, =_sbss
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fe4:	e002      	b.n	8000fec <LoopFillZerobss>

08000fe6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fe8:	f842 3b04 	str.w	r3, [r2], #4

08000fec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ff0:	d3f9      	bcc.n	8000fe6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ff2:	f7ff ffc5 	bl	8000f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f000 f80f 	bl	8001018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ffa:	f7ff fee3 	bl	8000dc4 <main>
  bx lr
 8000ffe:	4770      	bx	lr
  ldr r3, =_sidata
 8001000:	080020ac 	.word	0x080020ac
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001008:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800100c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001010:	200000e0 	.word	0x200000e0

08001014 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC1_2_IRQHandler>
	...

08001018 <__libc_init_array>:
 8001018:	b570      	push	{r4, r5, r6, lr}
 800101a:	2500      	movs	r5, #0
 800101c:	4e0c      	ldr	r6, [pc, #48]	; (8001050 <__libc_init_array+0x38>)
 800101e:	4c0d      	ldr	r4, [pc, #52]	; (8001054 <__libc_init_array+0x3c>)
 8001020:	1ba4      	subs	r4, r4, r6
 8001022:	10a4      	asrs	r4, r4, #2
 8001024:	42a5      	cmp	r5, r4
 8001026:	d109      	bne.n	800103c <__libc_init_array+0x24>
 8001028:	f000 ffc0 	bl	8001fac <_init>
 800102c:	2500      	movs	r5, #0
 800102e:	4e0a      	ldr	r6, [pc, #40]	; (8001058 <__libc_init_array+0x40>)
 8001030:	4c0a      	ldr	r4, [pc, #40]	; (800105c <__libc_init_array+0x44>)
 8001032:	1ba4      	subs	r4, r4, r6
 8001034:	10a4      	asrs	r4, r4, #2
 8001036:	42a5      	cmp	r5, r4
 8001038:	d105      	bne.n	8001046 <__libc_init_array+0x2e>
 800103a:	bd70      	pop	{r4, r5, r6, pc}
 800103c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001040:	4798      	blx	r3
 8001042:	3501      	adds	r5, #1
 8001044:	e7ee      	b.n	8001024 <__libc_init_array+0xc>
 8001046:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800104a:	4798      	blx	r3
 800104c:	3501      	adds	r5, #1
 800104e:	e7f2      	b.n	8001036 <__libc_init_array+0x1e>
 8001050:	080020a4 	.word	0x080020a4
 8001054:	080020a4 	.word	0x080020a4
 8001058:	080020a4 	.word	0x080020a4
 800105c:	080020a8 	.word	0x080020a8

08001060 <memset>:
 8001060:	4603      	mov	r3, r0
 8001062:	4402      	add	r2, r0
 8001064:	4293      	cmp	r3, r2
 8001066:	d100      	bne.n	800106a <memset+0xa>
 8001068:	4770      	bx	lr
 800106a:	f803 1b01 	strb.w	r1, [r3], #1
 800106e:	e7f9      	b.n	8001064 <memset+0x4>

08001070 <iprintf>:
 8001070:	b40f      	push	{r0, r1, r2, r3}
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <iprintf+0x2c>)
 8001074:	b513      	push	{r0, r1, r4, lr}
 8001076:	681c      	ldr	r4, [r3, #0]
 8001078:	b124      	cbz	r4, 8001084 <iprintf+0x14>
 800107a:	69a3      	ldr	r3, [r4, #24]
 800107c:	b913      	cbnz	r3, 8001084 <iprintf+0x14>
 800107e:	4620      	mov	r0, r4
 8001080:	f000 fa24 	bl	80014cc <__sinit>
 8001084:	ab05      	add	r3, sp, #20
 8001086:	9a04      	ldr	r2, [sp, #16]
 8001088:	68a1      	ldr	r1, [r4, #8]
 800108a:	4620      	mov	r0, r4
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f000 fbdd 	bl	800184c <_vfiprintf_r>
 8001092:	b002      	add	sp, #8
 8001094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001098:	b004      	add	sp, #16
 800109a:	4770      	bx	lr
 800109c:	2000000c 	.word	0x2000000c

080010a0 <_puts_r>:
 80010a0:	b570      	push	{r4, r5, r6, lr}
 80010a2:	460e      	mov	r6, r1
 80010a4:	4605      	mov	r5, r0
 80010a6:	b118      	cbz	r0, 80010b0 <_puts_r+0x10>
 80010a8:	6983      	ldr	r3, [r0, #24]
 80010aa:	b90b      	cbnz	r3, 80010b0 <_puts_r+0x10>
 80010ac:	f000 fa0e 	bl	80014cc <__sinit>
 80010b0:	69ab      	ldr	r3, [r5, #24]
 80010b2:	68ac      	ldr	r4, [r5, #8]
 80010b4:	b913      	cbnz	r3, 80010bc <_puts_r+0x1c>
 80010b6:	4628      	mov	r0, r5
 80010b8:	f000 fa08 	bl	80014cc <__sinit>
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <_puts_r+0xac>)
 80010be:	429c      	cmp	r4, r3
 80010c0:	d117      	bne.n	80010f2 <_puts_r+0x52>
 80010c2:	686c      	ldr	r4, [r5, #4]
 80010c4:	89a3      	ldrh	r3, [r4, #12]
 80010c6:	071b      	lsls	r3, r3, #28
 80010c8:	d51d      	bpl.n	8001106 <_puts_r+0x66>
 80010ca:	6923      	ldr	r3, [r4, #16]
 80010cc:	b1db      	cbz	r3, 8001106 <_puts_r+0x66>
 80010ce:	3e01      	subs	r6, #1
 80010d0:	68a3      	ldr	r3, [r4, #8]
 80010d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80010d6:	3b01      	subs	r3, #1
 80010d8:	60a3      	str	r3, [r4, #8]
 80010da:	b9e9      	cbnz	r1, 8001118 <_puts_r+0x78>
 80010dc:	2b00      	cmp	r3, #0
 80010de:	da2e      	bge.n	800113e <_puts_r+0x9e>
 80010e0:	4622      	mov	r2, r4
 80010e2:	210a      	movs	r1, #10
 80010e4:	4628      	mov	r0, r5
 80010e6:	f000 f83f 	bl	8001168 <__swbuf_r>
 80010ea:	3001      	adds	r0, #1
 80010ec:	d011      	beq.n	8001112 <_puts_r+0x72>
 80010ee:	200a      	movs	r0, #10
 80010f0:	bd70      	pop	{r4, r5, r6, pc}
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <_puts_r+0xb0>)
 80010f4:	429c      	cmp	r4, r3
 80010f6:	d101      	bne.n	80010fc <_puts_r+0x5c>
 80010f8:	68ac      	ldr	r4, [r5, #8]
 80010fa:	e7e3      	b.n	80010c4 <_puts_r+0x24>
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <_puts_r+0xb4>)
 80010fe:	429c      	cmp	r4, r3
 8001100:	bf08      	it	eq
 8001102:	68ec      	ldreq	r4, [r5, #12]
 8001104:	e7de      	b.n	80010c4 <_puts_r+0x24>
 8001106:	4621      	mov	r1, r4
 8001108:	4628      	mov	r0, r5
 800110a:	f000 f87f 	bl	800120c <__swsetup_r>
 800110e:	2800      	cmp	r0, #0
 8001110:	d0dd      	beq.n	80010ce <_puts_r+0x2e>
 8001112:	f04f 30ff 	mov.w	r0, #4294967295
 8001116:	bd70      	pop	{r4, r5, r6, pc}
 8001118:	2b00      	cmp	r3, #0
 800111a:	da04      	bge.n	8001126 <_puts_r+0x86>
 800111c:	69a2      	ldr	r2, [r4, #24]
 800111e:	4293      	cmp	r3, r2
 8001120:	db06      	blt.n	8001130 <_puts_r+0x90>
 8001122:	290a      	cmp	r1, #10
 8001124:	d004      	beq.n	8001130 <_puts_r+0x90>
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	6022      	str	r2, [r4, #0]
 800112c:	7019      	strb	r1, [r3, #0]
 800112e:	e7cf      	b.n	80010d0 <_puts_r+0x30>
 8001130:	4622      	mov	r2, r4
 8001132:	4628      	mov	r0, r5
 8001134:	f000 f818 	bl	8001168 <__swbuf_r>
 8001138:	3001      	adds	r0, #1
 800113a:	d1c9      	bne.n	80010d0 <_puts_r+0x30>
 800113c:	e7e9      	b.n	8001112 <_puts_r+0x72>
 800113e:	200a      	movs	r0, #10
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	6022      	str	r2, [r4, #0]
 8001146:	7018      	strb	r0, [r3, #0]
 8001148:	bd70      	pop	{r4, r5, r6, pc}
 800114a:	bf00      	nop
 800114c:	0800202c 	.word	0x0800202c
 8001150:	0800204c 	.word	0x0800204c
 8001154:	0800200c 	.word	0x0800200c

08001158 <puts>:
 8001158:	4b02      	ldr	r3, [pc, #8]	; (8001164 <puts+0xc>)
 800115a:	4601      	mov	r1, r0
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	f7ff bf9f 	b.w	80010a0 <_puts_r>
 8001162:	bf00      	nop
 8001164:	2000000c 	.word	0x2000000c

08001168 <__swbuf_r>:
 8001168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116a:	460e      	mov	r6, r1
 800116c:	4614      	mov	r4, r2
 800116e:	4605      	mov	r5, r0
 8001170:	b118      	cbz	r0, 800117a <__swbuf_r+0x12>
 8001172:	6983      	ldr	r3, [r0, #24]
 8001174:	b90b      	cbnz	r3, 800117a <__swbuf_r+0x12>
 8001176:	f000 f9a9 	bl	80014cc <__sinit>
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <__swbuf_r+0x98>)
 800117c:	429c      	cmp	r4, r3
 800117e:	d12a      	bne.n	80011d6 <__swbuf_r+0x6e>
 8001180:	686c      	ldr	r4, [r5, #4]
 8001182:	69a3      	ldr	r3, [r4, #24]
 8001184:	60a3      	str	r3, [r4, #8]
 8001186:	89a3      	ldrh	r3, [r4, #12]
 8001188:	071a      	lsls	r2, r3, #28
 800118a:	d52e      	bpl.n	80011ea <__swbuf_r+0x82>
 800118c:	6923      	ldr	r3, [r4, #16]
 800118e:	b363      	cbz	r3, 80011ea <__swbuf_r+0x82>
 8001190:	6923      	ldr	r3, [r4, #16]
 8001192:	6820      	ldr	r0, [r4, #0]
 8001194:	b2f6      	uxtb	r6, r6
 8001196:	1ac0      	subs	r0, r0, r3
 8001198:	6963      	ldr	r3, [r4, #20]
 800119a:	4637      	mov	r7, r6
 800119c:	4298      	cmp	r0, r3
 800119e:	db04      	blt.n	80011aa <__swbuf_r+0x42>
 80011a0:	4621      	mov	r1, r4
 80011a2:	4628      	mov	r0, r5
 80011a4:	f000 f928 	bl	80013f8 <_fflush_r>
 80011a8:	bb28      	cbnz	r0, 80011f6 <__swbuf_r+0x8e>
 80011aa:	68a3      	ldr	r3, [r4, #8]
 80011ac:	3001      	adds	r0, #1
 80011ae:	3b01      	subs	r3, #1
 80011b0:	60a3      	str	r3, [r4, #8]
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	6022      	str	r2, [r4, #0]
 80011b8:	701e      	strb	r6, [r3, #0]
 80011ba:	6963      	ldr	r3, [r4, #20]
 80011bc:	4298      	cmp	r0, r3
 80011be:	d004      	beq.n	80011ca <__swbuf_r+0x62>
 80011c0:	89a3      	ldrh	r3, [r4, #12]
 80011c2:	07db      	lsls	r3, r3, #31
 80011c4:	d519      	bpl.n	80011fa <__swbuf_r+0x92>
 80011c6:	2e0a      	cmp	r6, #10
 80011c8:	d117      	bne.n	80011fa <__swbuf_r+0x92>
 80011ca:	4621      	mov	r1, r4
 80011cc:	4628      	mov	r0, r5
 80011ce:	f000 f913 	bl	80013f8 <_fflush_r>
 80011d2:	b190      	cbz	r0, 80011fa <__swbuf_r+0x92>
 80011d4:	e00f      	b.n	80011f6 <__swbuf_r+0x8e>
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <__swbuf_r+0x9c>)
 80011d8:	429c      	cmp	r4, r3
 80011da:	d101      	bne.n	80011e0 <__swbuf_r+0x78>
 80011dc:	68ac      	ldr	r4, [r5, #8]
 80011de:	e7d0      	b.n	8001182 <__swbuf_r+0x1a>
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <__swbuf_r+0xa0>)
 80011e2:	429c      	cmp	r4, r3
 80011e4:	bf08      	it	eq
 80011e6:	68ec      	ldreq	r4, [r5, #12]
 80011e8:	e7cb      	b.n	8001182 <__swbuf_r+0x1a>
 80011ea:	4621      	mov	r1, r4
 80011ec:	4628      	mov	r0, r5
 80011ee:	f000 f80d 	bl	800120c <__swsetup_r>
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d0cc      	beq.n	8001190 <__swbuf_r+0x28>
 80011f6:	f04f 37ff 	mov.w	r7, #4294967295
 80011fa:	4638      	mov	r0, r7
 80011fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011fe:	bf00      	nop
 8001200:	0800202c 	.word	0x0800202c
 8001204:	0800204c 	.word	0x0800204c
 8001208:	0800200c 	.word	0x0800200c

0800120c <__swsetup_r>:
 800120c:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <__swsetup_r+0xcc>)
 800120e:	b570      	push	{r4, r5, r6, lr}
 8001210:	681d      	ldr	r5, [r3, #0]
 8001212:	4606      	mov	r6, r0
 8001214:	460c      	mov	r4, r1
 8001216:	b125      	cbz	r5, 8001222 <__swsetup_r+0x16>
 8001218:	69ab      	ldr	r3, [r5, #24]
 800121a:	b913      	cbnz	r3, 8001222 <__swsetup_r+0x16>
 800121c:	4628      	mov	r0, r5
 800121e:	f000 f955 	bl	80014cc <__sinit>
 8001222:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <__swsetup_r+0xd0>)
 8001224:	429c      	cmp	r4, r3
 8001226:	d10f      	bne.n	8001248 <__swsetup_r+0x3c>
 8001228:	686c      	ldr	r4, [r5, #4]
 800122a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800122e:	b29a      	uxth	r2, r3
 8001230:	0715      	lsls	r5, r2, #28
 8001232:	d42c      	bmi.n	800128e <__swsetup_r+0x82>
 8001234:	06d0      	lsls	r0, r2, #27
 8001236:	d411      	bmi.n	800125c <__swsetup_r+0x50>
 8001238:	2209      	movs	r2, #9
 800123a:	6032      	str	r2, [r6, #0]
 800123c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001240:	81a3      	strh	r3, [r4, #12]
 8001242:	f04f 30ff 	mov.w	r0, #4294967295
 8001246:	bd70      	pop	{r4, r5, r6, pc}
 8001248:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <__swsetup_r+0xd4>)
 800124a:	429c      	cmp	r4, r3
 800124c:	d101      	bne.n	8001252 <__swsetup_r+0x46>
 800124e:	68ac      	ldr	r4, [r5, #8]
 8001250:	e7eb      	b.n	800122a <__swsetup_r+0x1e>
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <__swsetup_r+0xd8>)
 8001254:	429c      	cmp	r4, r3
 8001256:	bf08      	it	eq
 8001258:	68ec      	ldreq	r4, [r5, #12]
 800125a:	e7e6      	b.n	800122a <__swsetup_r+0x1e>
 800125c:	0751      	lsls	r1, r2, #29
 800125e:	d512      	bpl.n	8001286 <__swsetup_r+0x7a>
 8001260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001262:	b141      	cbz	r1, 8001276 <__swsetup_r+0x6a>
 8001264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001268:	4299      	cmp	r1, r3
 800126a:	d002      	beq.n	8001272 <__swsetup_r+0x66>
 800126c:	4630      	mov	r0, r6
 800126e:	f000 fa1b 	bl	80016a8 <_free_r>
 8001272:	2300      	movs	r3, #0
 8001274:	6363      	str	r3, [r4, #52]	; 0x34
 8001276:	89a3      	ldrh	r3, [r4, #12]
 8001278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800127c:	81a3      	strh	r3, [r4, #12]
 800127e:	2300      	movs	r3, #0
 8001280:	6063      	str	r3, [r4, #4]
 8001282:	6923      	ldr	r3, [r4, #16]
 8001284:	6023      	str	r3, [r4, #0]
 8001286:	89a3      	ldrh	r3, [r4, #12]
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	81a3      	strh	r3, [r4, #12]
 800128e:	6923      	ldr	r3, [r4, #16]
 8001290:	b94b      	cbnz	r3, 80012a6 <__swsetup_r+0x9a>
 8001292:	89a3      	ldrh	r3, [r4, #12]
 8001294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800129c:	d003      	beq.n	80012a6 <__swsetup_r+0x9a>
 800129e:	4621      	mov	r1, r4
 80012a0:	4630      	mov	r0, r6
 80012a2:	f000 f9c1 	bl	8001628 <__smakebuf_r>
 80012a6:	89a2      	ldrh	r2, [r4, #12]
 80012a8:	f012 0301 	ands.w	r3, r2, #1
 80012ac:	d00c      	beq.n	80012c8 <__swsetup_r+0xbc>
 80012ae:	2300      	movs	r3, #0
 80012b0:	60a3      	str	r3, [r4, #8]
 80012b2:	6963      	ldr	r3, [r4, #20]
 80012b4:	425b      	negs	r3, r3
 80012b6:	61a3      	str	r3, [r4, #24]
 80012b8:	6923      	ldr	r3, [r4, #16]
 80012ba:	b953      	cbnz	r3, 80012d2 <__swsetup_r+0xc6>
 80012bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80012c4:	d1ba      	bne.n	800123c <__swsetup_r+0x30>
 80012c6:	bd70      	pop	{r4, r5, r6, pc}
 80012c8:	0792      	lsls	r2, r2, #30
 80012ca:	bf58      	it	pl
 80012cc:	6963      	ldrpl	r3, [r4, #20]
 80012ce:	60a3      	str	r3, [r4, #8]
 80012d0:	e7f2      	b.n	80012b8 <__swsetup_r+0xac>
 80012d2:	2000      	movs	r0, #0
 80012d4:	e7f7      	b.n	80012c6 <__swsetup_r+0xba>
 80012d6:	bf00      	nop
 80012d8:	2000000c 	.word	0x2000000c
 80012dc:	0800202c 	.word	0x0800202c
 80012e0:	0800204c 	.word	0x0800204c
 80012e4:	0800200c 	.word	0x0800200c

080012e8 <__sflush_r>:
 80012e8:	898a      	ldrh	r2, [r1, #12]
 80012ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ee:	4605      	mov	r5, r0
 80012f0:	0710      	lsls	r0, r2, #28
 80012f2:	460c      	mov	r4, r1
 80012f4:	d45a      	bmi.n	80013ac <__sflush_r+0xc4>
 80012f6:	684b      	ldr	r3, [r1, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	dc05      	bgt.n	8001308 <__sflush_r+0x20>
 80012fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dc02      	bgt.n	8001308 <__sflush_r+0x20>
 8001302:	2000      	movs	r0, #0
 8001304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800130a:	2e00      	cmp	r6, #0
 800130c:	d0f9      	beq.n	8001302 <__sflush_r+0x1a>
 800130e:	2300      	movs	r3, #0
 8001310:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001314:	682f      	ldr	r7, [r5, #0]
 8001316:	602b      	str	r3, [r5, #0]
 8001318:	d033      	beq.n	8001382 <__sflush_r+0x9a>
 800131a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800131c:	89a3      	ldrh	r3, [r4, #12]
 800131e:	075a      	lsls	r2, r3, #29
 8001320:	d505      	bpl.n	800132e <__sflush_r+0x46>
 8001322:	6863      	ldr	r3, [r4, #4]
 8001324:	1ac0      	subs	r0, r0, r3
 8001326:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001328:	b10b      	cbz	r3, 800132e <__sflush_r+0x46>
 800132a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800132c:	1ac0      	subs	r0, r0, r3
 800132e:	2300      	movs	r3, #0
 8001330:	4602      	mov	r2, r0
 8001332:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001334:	6a21      	ldr	r1, [r4, #32]
 8001336:	4628      	mov	r0, r5
 8001338:	47b0      	blx	r6
 800133a:	1c43      	adds	r3, r0, #1
 800133c:	89a3      	ldrh	r3, [r4, #12]
 800133e:	d106      	bne.n	800134e <__sflush_r+0x66>
 8001340:	6829      	ldr	r1, [r5, #0]
 8001342:	291d      	cmp	r1, #29
 8001344:	d84b      	bhi.n	80013de <__sflush_r+0xf6>
 8001346:	4a2b      	ldr	r2, [pc, #172]	; (80013f4 <__sflush_r+0x10c>)
 8001348:	40ca      	lsrs	r2, r1
 800134a:	07d6      	lsls	r6, r2, #31
 800134c:	d547      	bpl.n	80013de <__sflush_r+0xf6>
 800134e:	2200      	movs	r2, #0
 8001350:	6062      	str	r2, [r4, #4]
 8001352:	6922      	ldr	r2, [r4, #16]
 8001354:	04d9      	lsls	r1, r3, #19
 8001356:	6022      	str	r2, [r4, #0]
 8001358:	d504      	bpl.n	8001364 <__sflush_r+0x7c>
 800135a:	1c42      	adds	r2, r0, #1
 800135c:	d101      	bne.n	8001362 <__sflush_r+0x7a>
 800135e:	682b      	ldr	r3, [r5, #0]
 8001360:	b903      	cbnz	r3, 8001364 <__sflush_r+0x7c>
 8001362:	6560      	str	r0, [r4, #84]	; 0x54
 8001364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001366:	602f      	str	r7, [r5, #0]
 8001368:	2900      	cmp	r1, #0
 800136a:	d0ca      	beq.n	8001302 <__sflush_r+0x1a>
 800136c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001370:	4299      	cmp	r1, r3
 8001372:	d002      	beq.n	800137a <__sflush_r+0x92>
 8001374:	4628      	mov	r0, r5
 8001376:	f000 f997 	bl	80016a8 <_free_r>
 800137a:	2000      	movs	r0, #0
 800137c:	6360      	str	r0, [r4, #52]	; 0x34
 800137e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001382:	6a21      	ldr	r1, [r4, #32]
 8001384:	2301      	movs	r3, #1
 8001386:	4628      	mov	r0, r5
 8001388:	47b0      	blx	r6
 800138a:	1c41      	adds	r1, r0, #1
 800138c:	d1c6      	bne.n	800131c <__sflush_r+0x34>
 800138e:	682b      	ldr	r3, [r5, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0c3      	beq.n	800131c <__sflush_r+0x34>
 8001394:	2b1d      	cmp	r3, #29
 8001396:	d001      	beq.n	800139c <__sflush_r+0xb4>
 8001398:	2b16      	cmp	r3, #22
 800139a:	d101      	bne.n	80013a0 <__sflush_r+0xb8>
 800139c:	602f      	str	r7, [r5, #0]
 800139e:	e7b0      	b.n	8001302 <__sflush_r+0x1a>
 80013a0:	89a3      	ldrh	r3, [r4, #12]
 80013a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a6:	81a3      	strh	r3, [r4, #12]
 80013a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013ac:	690f      	ldr	r7, [r1, #16]
 80013ae:	2f00      	cmp	r7, #0
 80013b0:	d0a7      	beq.n	8001302 <__sflush_r+0x1a>
 80013b2:	0793      	lsls	r3, r2, #30
 80013b4:	bf18      	it	ne
 80013b6:	2300      	movne	r3, #0
 80013b8:	680e      	ldr	r6, [r1, #0]
 80013ba:	bf08      	it	eq
 80013bc:	694b      	ldreq	r3, [r1, #20]
 80013be:	eba6 0807 	sub.w	r8, r6, r7
 80013c2:	600f      	str	r7, [r1, #0]
 80013c4:	608b      	str	r3, [r1, #8]
 80013c6:	f1b8 0f00 	cmp.w	r8, #0
 80013ca:	dd9a      	ble.n	8001302 <__sflush_r+0x1a>
 80013cc:	4643      	mov	r3, r8
 80013ce:	463a      	mov	r2, r7
 80013d0:	6a21      	ldr	r1, [r4, #32]
 80013d2:	4628      	mov	r0, r5
 80013d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013d6:	47b0      	blx	r6
 80013d8:	2800      	cmp	r0, #0
 80013da:	dc07      	bgt.n	80013ec <__sflush_r+0x104>
 80013dc:	89a3      	ldrh	r3, [r4, #12]
 80013de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e2:	81a3      	strh	r3, [r4, #12]
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013ec:	4407      	add	r7, r0
 80013ee:	eba8 0800 	sub.w	r8, r8, r0
 80013f2:	e7e8      	b.n	80013c6 <__sflush_r+0xde>
 80013f4:	20400001 	.word	0x20400001

080013f8 <_fflush_r>:
 80013f8:	b538      	push	{r3, r4, r5, lr}
 80013fa:	690b      	ldr	r3, [r1, #16]
 80013fc:	4605      	mov	r5, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	b1db      	cbz	r3, 800143a <_fflush_r+0x42>
 8001402:	b118      	cbz	r0, 800140c <_fflush_r+0x14>
 8001404:	6983      	ldr	r3, [r0, #24]
 8001406:	b90b      	cbnz	r3, 800140c <_fflush_r+0x14>
 8001408:	f000 f860 	bl	80014cc <__sinit>
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <_fflush_r+0x48>)
 800140e:	429c      	cmp	r4, r3
 8001410:	d109      	bne.n	8001426 <_fflush_r+0x2e>
 8001412:	686c      	ldr	r4, [r5, #4]
 8001414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001418:	b17b      	cbz	r3, 800143a <_fflush_r+0x42>
 800141a:	4621      	mov	r1, r4
 800141c:	4628      	mov	r0, r5
 800141e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001422:	f7ff bf61 	b.w	80012e8 <__sflush_r>
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <_fflush_r+0x4c>)
 8001428:	429c      	cmp	r4, r3
 800142a:	d101      	bne.n	8001430 <_fflush_r+0x38>
 800142c:	68ac      	ldr	r4, [r5, #8]
 800142e:	e7f1      	b.n	8001414 <_fflush_r+0x1c>
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <_fflush_r+0x50>)
 8001432:	429c      	cmp	r4, r3
 8001434:	bf08      	it	eq
 8001436:	68ec      	ldreq	r4, [r5, #12]
 8001438:	e7ec      	b.n	8001414 <_fflush_r+0x1c>
 800143a:	2000      	movs	r0, #0
 800143c:	bd38      	pop	{r3, r4, r5, pc}
 800143e:	bf00      	nop
 8001440:	0800202c 	.word	0x0800202c
 8001444:	0800204c 	.word	0x0800204c
 8001448:	0800200c 	.word	0x0800200c

0800144c <_cleanup_r>:
 800144c:	4901      	ldr	r1, [pc, #4]	; (8001454 <_cleanup_r+0x8>)
 800144e:	f000 b8a9 	b.w	80015a4 <_fwalk_reent>
 8001452:	bf00      	nop
 8001454:	080013f9 	.word	0x080013f9

08001458 <std.isra.0>:
 8001458:	2300      	movs	r3, #0
 800145a:	b510      	push	{r4, lr}
 800145c:	4604      	mov	r4, r0
 800145e:	6003      	str	r3, [r0, #0]
 8001460:	6043      	str	r3, [r0, #4]
 8001462:	6083      	str	r3, [r0, #8]
 8001464:	8181      	strh	r1, [r0, #12]
 8001466:	6643      	str	r3, [r0, #100]	; 0x64
 8001468:	81c2      	strh	r2, [r0, #14]
 800146a:	6103      	str	r3, [r0, #16]
 800146c:	6143      	str	r3, [r0, #20]
 800146e:	6183      	str	r3, [r0, #24]
 8001470:	4619      	mov	r1, r3
 8001472:	2208      	movs	r2, #8
 8001474:	305c      	adds	r0, #92	; 0x5c
 8001476:	f7ff fdf3 	bl	8001060 <memset>
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <std.isra.0+0x38>)
 800147c:	6224      	str	r4, [r4, #32]
 800147e:	6263      	str	r3, [r4, #36]	; 0x24
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <std.isra.0+0x3c>)
 8001482:	62a3      	str	r3, [r4, #40]	; 0x28
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <std.isra.0+0x40>)
 8001486:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <std.isra.0+0x44>)
 800148a:	6323      	str	r3, [r4, #48]	; 0x30
 800148c:	bd10      	pop	{r4, pc}
 800148e:	bf00      	nop
 8001490:	08001dc9 	.word	0x08001dc9
 8001494:	08001deb 	.word	0x08001deb
 8001498:	08001e23 	.word	0x08001e23
 800149c:	08001e47 	.word	0x08001e47

080014a0 <__sfmoreglue>:
 80014a0:	b570      	push	{r4, r5, r6, lr}
 80014a2:	2568      	movs	r5, #104	; 0x68
 80014a4:	1e4a      	subs	r2, r1, #1
 80014a6:	4355      	muls	r5, r2
 80014a8:	460e      	mov	r6, r1
 80014aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014ae:	f000 f947 	bl	8001740 <_malloc_r>
 80014b2:	4604      	mov	r4, r0
 80014b4:	b140      	cbz	r0, 80014c8 <__sfmoreglue+0x28>
 80014b6:	2100      	movs	r1, #0
 80014b8:	e880 0042 	stmia.w	r0, {r1, r6}
 80014bc:	300c      	adds	r0, #12
 80014be:	60a0      	str	r0, [r4, #8]
 80014c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014c4:	f7ff fdcc 	bl	8001060 <memset>
 80014c8:	4620      	mov	r0, r4
 80014ca:	bd70      	pop	{r4, r5, r6, pc}

080014cc <__sinit>:
 80014cc:	6983      	ldr	r3, [r0, #24]
 80014ce:	b510      	push	{r4, lr}
 80014d0:	4604      	mov	r4, r0
 80014d2:	bb33      	cbnz	r3, 8001522 <__sinit+0x56>
 80014d4:	6483      	str	r3, [r0, #72]	; 0x48
 80014d6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80014d8:	6503      	str	r3, [r0, #80]	; 0x50
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <__sinit+0x58>)
 80014dc:	4a12      	ldr	r2, [pc, #72]	; (8001528 <__sinit+0x5c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6282      	str	r2, [r0, #40]	; 0x28
 80014e2:	4298      	cmp	r0, r3
 80014e4:	bf04      	itt	eq
 80014e6:	2301      	moveq	r3, #1
 80014e8:	6183      	streq	r3, [r0, #24]
 80014ea:	f000 f81f 	bl	800152c <__sfp>
 80014ee:	6060      	str	r0, [r4, #4]
 80014f0:	4620      	mov	r0, r4
 80014f2:	f000 f81b 	bl	800152c <__sfp>
 80014f6:	60a0      	str	r0, [r4, #8]
 80014f8:	4620      	mov	r0, r4
 80014fa:	f000 f817 	bl	800152c <__sfp>
 80014fe:	2200      	movs	r2, #0
 8001500:	60e0      	str	r0, [r4, #12]
 8001502:	2104      	movs	r1, #4
 8001504:	6860      	ldr	r0, [r4, #4]
 8001506:	f7ff ffa7 	bl	8001458 <std.isra.0>
 800150a:	2201      	movs	r2, #1
 800150c:	2109      	movs	r1, #9
 800150e:	68a0      	ldr	r0, [r4, #8]
 8001510:	f7ff ffa2 	bl	8001458 <std.isra.0>
 8001514:	2202      	movs	r2, #2
 8001516:	2112      	movs	r1, #18
 8001518:	68e0      	ldr	r0, [r4, #12]
 800151a:	f7ff ff9d 	bl	8001458 <std.isra.0>
 800151e:	2301      	movs	r3, #1
 8001520:	61a3      	str	r3, [r4, #24]
 8001522:	bd10      	pop	{r4, pc}
 8001524:	0800206c 	.word	0x0800206c
 8001528:	0800144d 	.word	0x0800144d

0800152c <__sfp>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <__sfp+0x74>)
 8001530:	4607      	mov	r7, r0
 8001532:	681e      	ldr	r6, [r3, #0]
 8001534:	69b3      	ldr	r3, [r6, #24]
 8001536:	b913      	cbnz	r3, 800153e <__sfp+0x12>
 8001538:	4630      	mov	r0, r6
 800153a:	f7ff ffc7 	bl	80014cc <__sinit>
 800153e:	3648      	adds	r6, #72	; 0x48
 8001540:	68b4      	ldr	r4, [r6, #8]
 8001542:	6873      	ldr	r3, [r6, #4]
 8001544:	3b01      	subs	r3, #1
 8001546:	d503      	bpl.n	8001550 <__sfp+0x24>
 8001548:	6833      	ldr	r3, [r6, #0]
 800154a:	b133      	cbz	r3, 800155a <__sfp+0x2e>
 800154c:	6836      	ldr	r6, [r6, #0]
 800154e:	e7f7      	b.n	8001540 <__sfp+0x14>
 8001550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001554:	b16d      	cbz	r5, 8001572 <__sfp+0x46>
 8001556:	3468      	adds	r4, #104	; 0x68
 8001558:	e7f4      	b.n	8001544 <__sfp+0x18>
 800155a:	2104      	movs	r1, #4
 800155c:	4638      	mov	r0, r7
 800155e:	f7ff ff9f 	bl	80014a0 <__sfmoreglue>
 8001562:	6030      	str	r0, [r6, #0]
 8001564:	2800      	cmp	r0, #0
 8001566:	d1f1      	bne.n	800154c <__sfp+0x20>
 8001568:	230c      	movs	r3, #12
 800156a:	4604      	mov	r4, r0
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4620      	mov	r0, r4
 8001570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001576:	81e3      	strh	r3, [r4, #14]
 8001578:	2301      	movs	r3, #1
 800157a:	6665      	str	r5, [r4, #100]	; 0x64
 800157c:	81a3      	strh	r3, [r4, #12]
 800157e:	6025      	str	r5, [r4, #0]
 8001580:	60a5      	str	r5, [r4, #8]
 8001582:	6065      	str	r5, [r4, #4]
 8001584:	6125      	str	r5, [r4, #16]
 8001586:	6165      	str	r5, [r4, #20]
 8001588:	61a5      	str	r5, [r4, #24]
 800158a:	2208      	movs	r2, #8
 800158c:	4629      	mov	r1, r5
 800158e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001592:	f7ff fd65 	bl	8001060 <memset>
 8001596:	6365      	str	r5, [r4, #52]	; 0x34
 8001598:	63a5      	str	r5, [r4, #56]	; 0x38
 800159a:	64a5      	str	r5, [r4, #72]	; 0x48
 800159c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800159e:	e7e6      	b.n	800156e <__sfp+0x42>
 80015a0:	0800206c 	.word	0x0800206c

080015a4 <_fwalk_reent>:
 80015a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015a8:	4680      	mov	r8, r0
 80015aa:	4689      	mov	r9, r1
 80015ac:	2600      	movs	r6, #0
 80015ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80015b2:	b914      	cbnz	r4, 80015ba <_fwalk_reent+0x16>
 80015b4:	4630      	mov	r0, r6
 80015b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015ba:	68a5      	ldr	r5, [r4, #8]
 80015bc:	6867      	ldr	r7, [r4, #4]
 80015be:	3f01      	subs	r7, #1
 80015c0:	d501      	bpl.n	80015c6 <_fwalk_reent+0x22>
 80015c2:	6824      	ldr	r4, [r4, #0]
 80015c4:	e7f5      	b.n	80015b2 <_fwalk_reent+0xe>
 80015c6:	89ab      	ldrh	r3, [r5, #12]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d907      	bls.n	80015dc <_fwalk_reent+0x38>
 80015cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015d0:	3301      	adds	r3, #1
 80015d2:	d003      	beq.n	80015dc <_fwalk_reent+0x38>
 80015d4:	4629      	mov	r1, r5
 80015d6:	4640      	mov	r0, r8
 80015d8:	47c8      	blx	r9
 80015da:	4306      	orrs	r6, r0
 80015dc:	3568      	adds	r5, #104	; 0x68
 80015de:	e7ee      	b.n	80015be <_fwalk_reent+0x1a>

080015e0 <__swhatbuf_r>:
 80015e0:	b570      	push	{r4, r5, r6, lr}
 80015e2:	460e      	mov	r6, r1
 80015e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015e8:	b090      	sub	sp, #64	; 0x40
 80015ea:	2900      	cmp	r1, #0
 80015ec:	4614      	mov	r4, r2
 80015ee:	461d      	mov	r5, r3
 80015f0:	da07      	bge.n	8001602 <__swhatbuf_r+0x22>
 80015f2:	2300      	movs	r3, #0
 80015f4:	602b      	str	r3, [r5, #0]
 80015f6:	89b3      	ldrh	r3, [r6, #12]
 80015f8:	061a      	lsls	r2, r3, #24
 80015fa:	d410      	bmi.n	800161e <__swhatbuf_r+0x3e>
 80015fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001600:	e00e      	b.n	8001620 <__swhatbuf_r+0x40>
 8001602:	aa01      	add	r2, sp, #4
 8001604:	f000 fc46 	bl	8001e94 <_fstat_r>
 8001608:	2800      	cmp	r0, #0
 800160a:	dbf2      	blt.n	80015f2 <__swhatbuf_r+0x12>
 800160c:	9a02      	ldr	r2, [sp, #8]
 800160e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001612:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001616:	425a      	negs	r2, r3
 8001618:	415a      	adcs	r2, r3
 800161a:	602a      	str	r2, [r5, #0]
 800161c:	e7ee      	b.n	80015fc <__swhatbuf_r+0x1c>
 800161e:	2340      	movs	r3, #64	; 0x40
 8001620:	2000      	movs	r0, #0
 8001622:	6023      	str	r3, [r4, #0]
 8001624:	b010      	add	sp, #64	; 0x40
 8001626:	bd70      	pop	{r4, r5, r6, pc}

08001628 <__smakebuf_r>:
 8001628:	898b      	ldrh	r3, [r1, #12]
 800162a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800162c:	079d      	lsls	r5, r3, #30
 800162e:	4606      	mov	r6, r0
 8001630:	460c      	mov	r4, r1
 8001632:	d507      	bpl.n	8001644 <__smakebuf_r+0x1c>
 8001634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001638:	6023      	str	r3, [r4, #0]
 800163a:	6123      	str	r3, [r4, #16]
 800163c:	2301      	movs	r3, #1
 800163e:	6163      	str	r3, [r4, #20]
 8001640:	b002      	add	sp, #8
 8001642:	bd70      	pop	{r4, r5, r6, pc}
 8001644:	ab01      	add	r3, sp, #4
 8001646:	466a      	mov	r2, sp
 8001648:	f7ff ffca 	bl	80015e0 <__swhatbuf_r>
 800164c:	9900      	ldr	r1, [sp, #0]
 800164e:	4605      	mov	r5, r0
 8001650:	4630      	mov	r0, r6
 8001652:	f000 f875 	bl	8001740 <_malloc_r>
 8001656:	b948      	cbnz	r0, 800166c <__smakebuf_r+0x44>
 8001658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800165c:	059a      	lsls	r2, r3, #22
 800165e:	d4ef      	bmi.n	8001640 <__smakebuf_r+0x18>
 8001660:	f023 0303 	bic.w	r3, r3, #3
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	81a3      	strh	r3, [r4, #12]
 800166a:	e7e3      	b.n	8001634 <__smakebuf_r+0xc>
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <__smakebuf_r+0x7c>)
 800166e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001670:	89a3      	ldrh	r3, [r4, #12]
 8001672:	6020      	str	r0, [r4, #0]
 8001674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001678:	81a3      	strh	r3, [r4, #12]
 800167a:	9b00      	ldr	r3, [sp, #0]
 800167c:	6120      	str	r0, [r4, #16]
 800167e:	6163      	str	r3, [r4, #20]
 8001680:	9b01      	ldr	r3, [sp, #4]
 8001682:	b15b      	cbz	r3, 800169c <__smakebuf_r+0x74>
 8001684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001688:	4630      	mov	r0, r6
 800168a:	f000 fc15 	bl	8001eb8 <_isatty_r>
 800168e:	b128      	cbz	r0, 800169c <__smakebuf_r+0x74>
 8001690:	89a3      	ldrh	r3, [r4, #12]
 8001692:	f023 0303 	bic.w	r3, r3, #3
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	81a3      	strh	r3, [r4, #12]
 800169c:	89a3      	ldrh	r3, [r4, #12]
 800169e:	431d      	orrs	r5, r3
 80016a0:	81a5      	strh	r5, [r4, #12]
 80016a2:	e7cd      	b.n	8001640 <__smakebuf_r+0x18>
 80016a4:	0800144d 	.word	0x0800144d

080016a8 <_free_r>:
 80016a8:	b538      	push	{r3, r4, r5, lr}
 80016aa:	4605      	mov	r5, r0
 80016ac:	2900      	cmp	r1, #0
 80016ae:	d043      	beq.n	8001738 <_free_r+0x90>
 80016b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016b4:	1f0c      	subs	r4, r1, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	bfb8      	it	lt
 80016ba:	18e4      	addlt	r4, r4, r3
 80016bc:	f000 fc2c 	bl	8001f18 <__malloc_lock>
 80016c0:	4a1e      	ldr	r2, [pc, #120]	; (800173c <_free_r+0x94>)
 80016c2:	6813      	ldr	r3, [r2, #0]
 80016c4:	4610      	mov	r0, r2
 80016c6:	b933      	cbnz	r3, 80016d6 <_free_r+0x2e>
 80016c8:	6063      	str	r3, [r4, #4]
 80016ca:	6014      	str	r4, [r2, #0]
 80016cc:	4628      	mov	r0, r5
 80016ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016d2:	f000 bc22 	b.w	8001f1a <__malloc_unlock>
 80016d6:	42a3      	cmp	r3, r4
 80016d8:	d90b      	bls.n	80016f2 <_free_r+0x4a>
 80016da:	6821      	ldr	r1, [r4, #0]
 80016dc:	1862      	adds	r2, r4, r1
 80016de:	4293      	cmp	r3, r2
 80016e0:	bf01      	itttt	eq
 80016e2:	681a      	ldreq	r2, [r3, #0]
 80016e4:	685b      	ldreq	r3, [r3, #4]
 80016e6:	1852      	addeq	r2, r2, r1
 80016e8:	6022      	streq	r2, [r4, #0]
 80016ea:	6063      	str	r3, [r4, #4]
 80016ec:	6004      	str	r4, [r0, #0]
 80016ee:	e7ed      	b.n	80016cc <_free_r+0x24>
 80016f0:	4613      	mov	r3, r2
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	b10a      	cbz	r2, 80016fa <_free_r+0x52>
 80016f6:	42a2      	cmp	r2, r4
 80016f8:	d9fa      	bls.n	80016f0 <_free_r+0x48>
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	1858      	adds	r0, r3, r1
 80016fe:	42a0      	cmp	r0, r4
 8001700:	d10b      	bne.n	800171a <_free_r+0x72>
 8001702:	6820      	ldr	r0, [r4, #0]
 8001704:	4401      	add	r1, r0
 8001706:	1858      	adds	r0, r3, r1
 8001708:	4282      	cmp	r2, r0
 800170a:	6019      	str	r1, [r3, #0]
 800170c:	d1de      	bne.n	80016cc <_free_r+0x24>
 800170e:	6810      	ldr	r0, [r2, #0]
 8001710:	6852      	ldr	r2, [r2, #4]
 8001712:	4401      	add	r1, r0
 8001714:	6019      	str	r1, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	e7d8      	b.n	80016cc <_free_r+0x24>
 800171a:	d902      	bls.n	8001722 <_free_r+0x7a>
 800171c:	230c      	movs	r3, #12
 800171e:	602b      	str	r3, [r5, #0]
 8001720:	e7d4      	b.n	80016cc <_free_r+0x24>
 8001722:	6820      	ldr	r0, [r4, #0]
 8001724:	1821      	adds	r1, r4, r0
 8001726:	428a      	cmp	r2, r1
 8001728:	bf01      	itttt	eq
 800172a:	6811      	ldreq	r1, [r2, #0]
 800172c:	6852      	ldreq	r2, [r2, #4]
 800172e:	1809      	addeq	r1, r1, r0
 8001730:	6021      	streq	r1, [r4, #0]
 8001732:	6062      	str	r2, [r4, #4]
 8001734:	605c      	str	r4, [r3, #4]
 8001736:	e7c9      	b.n	80016cc <_free_r+0x24>
 8001738:	bd38      	pop	{r3, r4, r5, pc}
 800173a:	bf00      	nop
 800173c:	2000008c 	.word	0x2000008c

08001740 <_malloc_r>:
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	1ccd      	adds	r5, r1, #3
 8001744:	f025 0503 	bic.w	r5, r5, #3
 8001748:	3508      	adds	r5, #8
 800174a:	2d0c      	cmp	r5, #12
 800174c:	bf38      	it	cc
 800174e:	250c      	movcc	r5, #12
 8001750:	2d00      	cmp	r5, #0
 8001752:	4606      	mov	r6, r0
 8001754:	db01      	blt.n	800175a <_malloc_r+0x1a>
 8001756:	42a9      	cmp	r1, r5
 8001758:	d903      	bls.n	8001762 <_malloc_r+0x22>
 800175a:	230c      	movs	r3, #12
 800175c:	6033      	str	r3, [r6, #0]
 800175e:	2000      	movs	r0, #0
 8001760:	bd70      	pop	{r4, r5, r6, pc}
 8001762:	f000 fbd9 	bl	8001f18 <__malloc_lock>
 8001766:	4a23      	ldr	r2, [pc, #140]	; (80017f4 <_malloc_r+0xb4>)
 8001768:	6814      	ldr	r4, [r2, #0]
 800176a:	4621      	mov	r1, r4
 800176c:	b991      	cbnz	r1, 8001794 <_malloc_r+0x54>
 800176e:	4c22      	ldr	r4, [pc, #136]	; (80017f8 <_malloc_r+0xb8>)
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	b91b      	cbnz	r3, 800177c <_malloc_r+0x3c>
 8001774:	4630      	mov	r0, r6
 8001776:	f000 fb17 	bl	8001da8 <_sbrk_r>
 800177a:	6020      	str	r0, [r4, #0]
 800177c:	4629      	mov	r1, r5
 800177e:	4630      	mov	r0, r6
 8001780:	f000 fb12 	bl	8001da8 <_sbrk_r>
 8001784:	1c43      	adds	r3, r0, #1
 8001786:	d126      	bne.n	80017d6 <_malloc_r+0x96>
 8001788:	230c      	movs	r3, #12
 800178a:	4630      	mov	r0, r6
 800178c:	6033      	str	r3, [r6, #0]
 800178e:	f000 fbc4 	bl	8001f1a <__malloc_unlock>
 8001792:	e7e4      	b.n	800175e <_malloc_r+0x1e>
 8001794:	680b      	ldr	r3, [r1, #0]
 8001796:	1b5b      	subs	r3, r3, r5
 8001798:	d41a      	bmi.n	80017d0 <_malloc_r+0x90>
 800179a:	2b0b      	cmp	r3, #11
 800179c:	d90f      	bls.n	80017be <_malloc_r+0x7e>
 800179e:	600b      	str	r3, [r1, #0]
 80017a0:	18cc      	adds	r4, r1, r3
 80017a2:	50cd      	str	r5, [r1, r3]
 80017a4:	4630      	mov	r0, r6
 80017a6:	f000 fbb8 	bl	8001f1a <__malloc_unlock>
 80017aa:	f104 000b 	add.w	r0, r4, #11
 80017ae:	1d23      	adds	r3, r4, #4
 80017b0:	f020 0007 	bic.w	r0, r0, #7
 80017b4:	1ac3      	subs	r3, r0, r3
 80017b6:	d01b      	beq.n	80017f0 <_malloc_r+0xb0>
 80017b8:	425a      	negs	r2, r3
 80017ba:	50e2      	str	r2, [r4, r3]
 80017bc:	bd70      	pop	{r4, r5, r6, pc}
 80017be:	428c      	cmp	r4, r1
 80017c0:	bf0b      	itete	eq
 80017c2:	6863      	ldreq	r3, [r4, #4]
 80017c4:	684b      	ldrne	r3, [r1, #4]
 80017c6:	6013      	streq	r3, [r2, #0]
 80017c8:	6063      	strne	r3, [r4, #4]
 80017ca:	bf18      	it	ne
 80017cc:	460c      	movne	r4, r1
 80017ce:	e7e9      	b.n	80017a4 <_malloc_r+0x64>
 80017d0:	460c      	mov	r4, r1
 80017d2:	6849      	ldr	r1, [r1, #4]
 80017d4:	e7ca      	b.n	800176c <_malloc_r+0x2c>
 80017d6:	1cc4      	adds	r4, r0, #3
 80017d8:	f024 0403 	bic.w	r4, r4, #3
 80017dc:	42a0      	cmp	r0, r4
 80017de:	d005      	beq.n	80017ec <_malloc_r+0xac>
 80017e0:	1a21      	subs	r1, r4, r0
 80017e2:	4630      	mov	r0, r6
 80017e4:	f000 fae0 	bl	8001da8 <_sbrk_r>
 80017e8:	3001      	adds	r0, #1
 80017ea:	d0cd      	beq.n	8001788 <_malloc_r+0x48>
 80017ec:	6025      	str	r5, [r4, #0]
 80017ee:	e7d9      	b.n	80017a4 <_malloc_r+0x64>
 80017f0:	bd70      	pop	{r4, r5, r6, pc}
 80017f2:	bf00      	nop
 80017f4:	2000008c 	.word	0x2000008c
 80017f8:	20000090 	.word	0x20000090

080017fc <__sfputc_r>:
 80017fc:	6893      	ldr	r3, [r2, #8]
 80017fe:	b410      	push	{r4}
 8001800:	3b01      	subs	r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	6093      	str	r3, [r2, #8]
 8001806:	da08      	bge.n	800181a <__sfputc_r+0x1e>
 8001808:	6994      	ldr	r4, [r2, #24]
 800180a:	42a3      	cmp	r3, r4
 800180c:	db02      	blt.n	8001814 <__sfputc_r+0x18>
 800180e:	b2cb      	uxtb	r3, r1
 8001810:	2b0a      	cmp	r3, #10
 8001812:	d102      	bne.n	800181a <__sfputc_r+0x1e>
 8001814:	bc10      	pop	{r4}
 8001816:	f7ff bca7 	b.w	8001168 <__swbuf_r>
 800181a:	6813      	ldr	r3, [r2, #0]
 800181c:	1c58      	adds	r0, r3, #1
 800181e:	6010      	str	r0, [r2, #0]
 8001820:	7019      	strb	r1, [r3, #0]
 8001822:	b2c8      	uxtb	r0, r1
 8001824:	bc10      	pop	{r4}
 8001826:	4770      	bx	lr

08001828 <__sfputs_r>:
 8001828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182a:	4606      	mov	r6, r0
 800182c:	460f      	mov	r7, r1
 800182e:	4614      	mov	r4, r2
 8001830:	18d5      	adds	r5, r2, r3
 8001832:	42ac      	cmp	r4, r5
 8001834:	d101      	bne.n	800183a <__sfputs_r+0x12>
 8001836:	2000      	movs	r0, #0
 8001838:	e007      	b.n	800184a <__sfputs_r+0x22>
 800183a:	463a      	mov	r2, r7
 800183c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001840:	4630      	mov	r0, r6
 8001842:	f7ff ffdb 	bl	80017fc <__sfputc_r>
 8001846:	1c43      	adds	r3, r0, #1
 8001848:	d1f3      	bne.n	8001832 <__sfputs_r+0xa>
 800184a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800184c <_vfiprintf_r>:
 800184c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001850:	b09d      	sub	sp, #116	; 0x74
 8001852:	460c      	mov	r4, r1
 8001854:	4617      	mov	r7, r2
 8001856:	9303      	str	r3, [sp, #12]
 8001858:	4606      	mov	r6, r0
 800185a:	b118      	cbz	r0, 8001864 <_vfiprintf_r+0x18>
 800185c:	6983      	ldr	r3, [r0, #24]
 800185e:	b90b      	cbnz	r3, 8001864 <_vfiprintf_r+0x18>
 8001860:	f7ff fe34 	bl	80014cc <__sinit>
 8001864:	4b7c      	ldr	r3, [pc, #496]	; (8001a58 <_vfiprintf_r+0x20c>)
 8001866:	429c      	cmp	r4, r3
 8001868:	d157      	bne.n	800191a <_vfiprintf_r+0xce>
 800186a:	6874      	ldr	r4, [r6, #4]
 800186c:	89a3      	ldrh	r3, [r4, #12]
 800186e:	0718      	lsls	r0, r3, #28
 8001870:	d55d      	bpl.n	800192e <_vfiprintf_r+0xe2>
 8001872:	6923      	ldr	r3, [r4, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d05a      	beq.n	800192e <_vfiprintf_r+0xe2>
 8001878:	2300      	movs	r3, #0
 800187a:	9309      	str	r3, [sp, #36]	; 0x24
 800187c:	2320      	movs	r3, #32
 800187e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001882:	2330      	movs	r3, #48	; 0x30
 8001884:	f04f 0b01 	mov.w	fp, #1
 8001888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800188c:	46b8      	mov	r8, r7
 800188e:	4645      	mov	r5, r8
 8001890:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d155      	bne.n	8001944 <_vfiprintf_r+0xf8>
 8001898:	ebb8 0a07 	subs.w	sl, r8, r7
 800189c:	d00b      	beq.n	80018b6 <_vfiprintf_r+0x6a>
 800189e:	4653      	mov	r3, sl
 80018a0:	463a      	mov	r2, r7
 80018a2:	4621      	mov	r1, r4
 80018a4:	4630      	mov	r0, r6
 80018a6:	f7ff ffbf 	bl	8001828 <__sfputs_r>
 80018aa:	3001      	adds	r0, #1
 80018ac:	f000 80c4 	beq.w	8001a38 <_vfiprintf_r+0x1ec>
 80018b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018b2:	4453      	add	r3, sl
 80018b4:	9309      	str	r3, [sp, #36]	; 0x24
 80018b6:	f898 3000 	ldrb.w	r3, [r8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80bc 	beq.w	8001a38 <_vfiprintf_r+0x1ec>
 80018c0:	2300      	movs	r3, #0
 80018c2:	f04f 32ff 	mov.w	r2, #4294967295
 80018c6:	9304      	str	r3, [sp, #16]
 80018c8:	9307      	str	r3, [sp, #28]
 80018ca:	9205      	str	r2, [sp, #20]
 80018cc:	9306      	str	r3, [sp, #24]
 80018ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018d2:	931a      	str	r3, [sp, #104]	; 0x68
 80018d4:	2205      	movs	r2, #5
 80018d6:	7829      	ldrb	r1, [r5, #0]
 80018d8:	4860      	ldr	r0, [pc, #384]	; (8001a5c <_vfiprintf_r+0x210>)
 80018da:	f000 fb0f 	bl	8001efc <memchr>
 80018de:	f105 0801 	add.w	r8, r5, #1
 80018e2:	9b04      	ldr	r3, [sp, #16]
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d131      	bne.n	800194c <_vfiprintf_r+0x100>
 80018e8:	06d9      	lsls	r1, r3, #27
 80018ea:	bf44      	itt	mi
 80018ec:	2220      	movmi	r2, #32
 80018ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018f2:	071a      	lsls	r2, r3, #28
 80018f4:	bf44      	itt	mi
 80018f6:	222b      	movmi	r2, #43	; 0x2b
 80018f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018fc:	782a      	ldrb	r2, [r5, #0]
 80018fe:	2a2a      	cmp	r2, #42	; 0x2a
 8001900:	d02c      	beq.n	800195c <_vfiprintf_r+0x110>
 8001902:	2100      	movs	r1, #0
 8001904:	200a      	movs	r0, #10
 8001906:	9a07      	ldr	r2, [sp, #28]
 8001908:	46a8      	mov	r8, r5
 800190a:	f898 3000 	ldrb.w	r3, [r8]
 800190e:	3501      	adds	r5, #1
 8001910:	3b30      	subs	r3, #48	; 0x30
 8001912:	2b09      	cmp	r3, #9
 8001914:	d96d      	bls.n	80019f2 <_vfiprintf_r+0x1a6>
 8001916:	b371      	cbz	r1, 8001976 <_vfiprintf_r+0x12a>
 8001918:	e026      	b.n	8001968 <_vfiprintf_r+0x11c>
 800191a:	4b51      	ldr	r3, [pc, #324]	; (8001a60 <_vfiprintf_r+0x214>)
 800191c:	429c      	cmp	r4, r3
 800191e:	d101      	bne.n	8001924 <_vfiprintf_r+0xd8>
 8001920:	68b4      	ldr	r4, [r6, #8]
 8001922:	e7a3      	b.n	800186c <_vfiprintf_r+0x20>
 8001924:	4b4f      	ldr	r3, [pc, #316]	; (8001a64 <_vfiprintf_r+0x218>)
 8001926:	429c      	cmp	r4, r3
 8001928:	bf08      	it	eq
 800192a:	68f4      	ldreq	r4, [r6, #12]
 800192c:	e79e      	b.n	800186c <_vfiprintf_r+0x20>
 800192e:	4621      	mov	r1, r4
 8001930:	4630      	mov	r0, r6
 8001932:	f7ff fc6b 	bl	800120c <__swsetup_r>
 8001936:	2800      	cmp	r0, #0
 8001938:	d09e      	beq.n	8001878 <_vfiprintf_r+0x2c>
 800193a:	f04f 30ff 	mov.w	r0, #4294967295
 800193e:	b01d      	add	sp, #116	; 0x74
 8001940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001944:	2b25      	cmp	r3, #37	; 0x25
 8001946:	d0a7      	beq.n	8001898 <_vfiprintf_r+0x4c>
 8001948:	46a8      	mov	r8, r5
 800194a:	e7a0      	b.n	800188e <_vfiprintf_r+0x42>
 800194c:	4a43      	ldr	r2, [pc, #268]	; (8001a5c <_vfiprintf_r+0x210>)
 800194e:	4645      	mov	r5, r8
 8001950:	1a80      	subs	r0, r0, r2
 8001952:	fa0b f000 	lsl.w	r0, fp, r0
 8001956:	4318      	orrs	r0, r3
 8001958:	9004      	str	r0, [sp, #16]
 800195a:	e7bb      	b.n	80018d4 <_vfiprintf_r+0x88>
 800195c:	9a03      	ldr	r2, [sp, #12]
 800195e:	1d11      	adds	r1, r2, #4
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	9103      	str	r1, [sp, #12]
 8001964:	2a00      	cmp	r2, #0
 8001966:	db01      	blt.n	800196c <_vfiprintf_r+0x120>
 8001968:	9207      	str	r2, [sp, #28]
 800196a:	e004      	b.n	8001976 <_vfiprintf_r+0x12a>
 800196c:	4252      	negs	r2, r2
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	9207      	str	r2, [sp, #28]
 8001974:	9304      	str	r3, [sp, #16]
 8001976:	f898 3000 	ldrb.w	r3, [r8]
 800197a:	2b2e      	cmp	r3, #46	; 0x2e
 800197c:	d110      	bne.n	80019a0 <_vfiprintf_r+0x154>
 800197e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001982:	f108 0101 	add.w	r1, r8, #1
 8001986:	2b2a      	cmp	r3, #42	; 0x2a
 8001988:	d137      	bne.n	80019fa <_vfiprintf_r+0x1ae>
 800198a:	9b03      	ldr	r3, [sp, #12]
 800198c:	f108 0802 	add.w	r8, r8, #2
 8001990:	1d1a      	adds	r2, r3, #4
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	9203      	str	r2, [sp, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	bfb8      	it	lt
 800199a:	f04f 33ff 	movlt.w	r3, #4294967295
 800199e:	9305      	str	r3, [sp, #20]
 80019a0:	4d31      	ldr	r5, [pc, #196]	; (8001a68 <_vfiprintf_r+0x21c>)
 80019a2:	2203      	movs	r2, #3
 80019a4:	f898 1000 	ldrb.w	r1, [r8]
 80019a8:	4628      	mov	r0, r5
 80019aa:	f000 faa7 	bl	8001efc <memchr>
 80019ae:	b140      	cbz	r0, 80019c2 <_vfiprintf_r+0x176>
 80019b0:	2340      	movs	r3, #64	; 0x40
 80019b2:	1b40      	subs	r0, r0, r5
 80019b4:	fa03 f000 	lsl.w	r0, r3, r0
 80019b8:	9b04      	ldr	r3, [sp, #16]
 80019ba:	f108 0801 	add.w	r8, r8, #1
 80019be:	4303      	orrs	r3, r0
 80019c0:	9304      	str	r3, [sp, #16]
 80019c2:	f898 1000 	ldrb.w	r1, [r8]
 80019c6:	2206      	movs	r2, #6
 80019c8:	4828      	ldr	r0, [pc, #160]	; (8001a6c <_vfiprintf_r+0x220>)
 80019ca:	f108 0701 	add.w	r7, r8, #1
 80019ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019d2:	f000 fa93 	bl	8001efc <memchr>
 80019d6:	2800      	cmp	r0, #0
 80019d8:	d034      	beq.n	8001a44 <_vfiprintf_r+0x1f8>
 80019da:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <_vfiprintf_r+0x224>)
 80019dc:	bb03      	cbnz	r3, 8001a20 <_vfiprintf_r+0x1d4>
 80019de:	9b03      	ldr	r3, [sp, #12]
 80019e0:	3307      	adds	r3, #7
 80019e2:	f023 0307 	bic.w	r3, r3, #7
 80019e6:	3308      	adds	r3, #8
 80019e8:	9303      	str	r3, [sp, #12]
 80019ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019ec:	444b      	add	r3, r9
 80019ee:	9309      	str	r3, [sp, #36]	; 0x24
 80019f0:	e74c      	b.n	800188c <_vfiprintf_r+0x40>
 80019f2:	fb00 3202 	mla	r2, r0, r2, r3
 80019f6:	2101      	movs	r1, #1
 80019f8:	e786      	b.n	8001908 <_vfiprintf_r+0xbc>
 80019fa:	2300      	movs	r3, #0
 80019fc:	250a      	movs	r5, #10
 80019fe:	4618      	mov	r0, r3
 8001a00:	9305      	str	r3, [sp, #20]
 8001a02:	4688      	mov	r8, r1
 8001a04:	f898 2000 	ldrb.w	r2, [r8]
 8001a08:	3101      	adds	r1, #1
 8001a0a:	3a30      	subs	r2, #48	; 0x30
 8001a0c:	2a09      	cmp	r2, #9
 8001a0e:	d903      	bls.n	8001a18 <_vfiprintf_r+0x1cc>
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0c5      	beq.n	80019a0 <_vfiprintf_r+0x154>
 8001a14:	9005      	str	r0, [sp, #20]
 8001a16:	e7c3      	b.n	80019a0 <_vfiprintf_r+0x154>
 8001a18:	fb05 2000 	mla	r0, r5, r0, r2
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e7f0      	b.n	8001a02 <_vfiprintf_r+0x1b6>
 8001a20:	ab03      	add	r3, sp, #12
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	4622      	mov	r2, r4
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <_vfiprintf_r+0x228>)
 8001a28:	a904      	add	r1, sp, #16
 8001a2a:	4630      	mov	r0, r6
 8001a2c:	f3af 8000 	nop.w
 8001a30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001a34:	4681      	mov	r9, r0
 8001a36:	d1d8      	bne.n	80019ea <_vfiprintf_r+0x19e>
 8001a38:	89a3      	ldrh	r3, [r4, #12]
 8001a3a:	065b      	lsls	r3, r3, #25
 8001a3c:	f53f af7d 	bmi.w	800193a <_vfiprintf_r+0xee>
 8001a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a42:	e77c      	b.n	800193e <_vfiprintf_r+0xf2>
 8001a44:	ab03      	add	r3, sp, #12
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	4622      	mov	r2, r4
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <_vfiprintf_r+0x228>)
 8001a4c:	a904      	add	r1, sp, #16
 8001a4e:	4630      	mov	r0, r6
 8001a50:	f000 f88a 	bl	8001b68 <_printf_i>
 8001a54:	e7ec      	b.n	8001a30 <_vfiprintf_r+0x1e4>
 8001a56:	bf00      	nop
 8001a58:	0800202c 	.word	0x0800202c
 8001a5c:	08002070 	.word	0x08002070
 8001a60:	0800204c 	.word	0x0800204c
 8001a64:	0800200c 	.word	0x0800200c
 8001a68:	08002076 	.word	0x08002076
 8001a6c:	0800207a 	.word	0x0800207a
 8001a70:	00000000 	.word	0x00000000
 8001a74:	08001829 	.word	0x08001829

08001a78 <_printf_common>:
 8001a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a7c:	4691      	mov	r9, r2
 8001a7e:	461f      	mov	r7, r3
 8001a80:	688a      	ldr	r2, [r1, #8]
 8001a82:	690b      	ldr	r3, [r1, #16]
 8001a84:	4606      	mov	r6, r0
 8001a86:	4293      	cmp	r3, r2
 8001a88:	bfb8      	it	lt
 8001a8a:	4613      	movlt	r3, r2
 8001a8c:	f8c9 3000 	str.w	r3, [r9]
 8001a90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a94:	460c      	mov	r4, r1
 8001a96:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a9a:	b112      	cbz	r2, 8001aa2 <_printf_common+0x2a>
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f8c9 3000 	str.w	r3, [r9]
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	0699      	lsls	r1, r3, #26
 8001aa6:	bf42      	ittt	mi
 8001aa8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001aac:	3302      	addmi	r3, #2
 8001aae:	f8c9 3000 	strmi.w	r3, [r9]
 8001ab2:	6825      	ldr	r5, [r4, #0]
 8001ab4:	f015 0506 	ands.w	r5, r5, #6
 8001ab8:	d107      	bne.n	8001aca <_printf_common+0x52>
 8001aba:	f104 0a19 	add.w	sl, r4, #25
 8001abe:	68e3      	ldr	r3, [r4, #12]
 8001ac0:	f8d9 2000 	ldr.w	r2, [r9]
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	429d      	cmp	r5, r3
 8001ac8:	db2a      	blt.n	8001b20 <_printf_common+0xa8>
 8001aca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ace:	6822      	ldr	r2, [r4, #0]
 8001ad0:	3300      	adds	r3, #0
 8001ad2:	bf18      	it	ne
 8001ad4:	2301      	movne	r3, #1
 8001ad6:	0692      	lsls	r2, r2, #26
 8001ad8:	d42f      	bmi.n	8001b3a <_printf_common+0xc2>
 8001ada:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ade:	4639      	mov	r1, r7
 8001ae0:	4630      	mov	r0, r6
 8001ae2:	47c0      	blx	r8
 8001ae4:	3001      	adds	r0, #1
 8001ae6:	d022      	beq.n	8001b2e <_printf_common+0xb6>
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	68e5      	ldr	r5, [r4, #12]
 8001aec:	f003 0306 	and.w	r3, r3, #6
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	bf18      	it	ne
 8001af4:	2500      	movne	r5, #0
 8001af6:	f8d9 2000 	ldr.w	r2, [r9]
 8001afa:	f04f 0900 	mov.w	r9, #0
 8001afe:	bf08      	it	eq
 8001b00:	1aad      	subeq	r5, r5, r2
 8001b02:	68a3      	ldr	r3, [r4, #8]
 8001b04:	6922      	ldr	r2, [r4, #16]
 8001b06:	bf08      	it	eq
 8001b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	bfc4      	itt	gt
 8001b10:	1a9b      	subgt	r3, r3, r2
 8001b12:	18ed      	addgt	r5, r5, r3
 8001b14:	341a      	adds	r4, #26
 8001b16:	454d      	cmp	r5, r9
 8001b18:	d11b      	bne.n	8001b52 <_printf_common+0xda>
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b20:	2301      	movs	r3, #1
 8001b22:	4652      	mov	r2, sl
 8001b24:	4639      	mov	r1, r7
 8001b26:	4630      	mov	r0, r6
 8001b28:	47c0      	blx	r8
 8001b2a:	3001      	adds	r0, #1
 8001b2c:	d103      	bne.n	8001b36 <_printf_common+0xbe>
 8001b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b36:	3501      	adds	r5, #1
 8001b38:	e7c1      	b.n	8001abe <_printf_common+0x46>
 8001b3a:	2030      	movs	r0, #48	; 0x30
 8001b3c:	18e1      	adds	r1, r4, r3
 8001b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b48:	4422      	add	r2, r4
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b50:	e7c3      	b.n	8001ada <_printf_common+0x62>
 8001b52:	2301      	movs	r3, #1
 8001b54:	4622      	mov	r2, r4
 8001b56:	4639      	mov	r1, r7
 8001b58:	4630      	mov	r0, r6
 8001b5a:	47c0      	blx	r8
 8001b5c:	3001      	adds	r0, #1
 8001b5e:	d0e6      	beq.n	8001b2e <_printf_common+0xb6>
 8001b60:	f109 0901 	add.w	r9, r9, #1
 8001b64:	e7d7      	b.n	8001b16 <_printf_common+0x9e>
	...

08001b68 <_printf_i>:
 8001b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b6c:	4617      	mov	r7, r2
 8001b6e:	7e0a      	ldrb	r2, [r1, #24]
 8001b70:	b085      	sub	sp, #20
 8001b72:	2a6e      	cmp	r2, #110	; 0x6e
 8001b74:	4698      	mov	r8, r3
 8001b76:	4606      	mov	r6, r0
 8001b78:	460c      	mov	r4, r1
 8001b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001b7c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001b80:	f000 80bc 	beq.w	8001cfc <_printf_i+0x194>
 8001b84:	d81a      	bhi.n	8001bbc <_printf_i+0x54>
 8001b86:	2a63      	cmp	r2, #99	; 0x63
 8001b88:	d02e      	beq.n	8001be8 <_printf_i+0x80>
 8001b8a:	d80a      	bhi.n	8001ba2 <_printf_i+0x3a>
 8001b8c:	2a00      	cmp	r2, #0
 8001b8e:	f000 80c8 	beq.w	8001d22 <_printf_i+0x1ba>
 8001b92:	2a58      	cmp	r2, #88	; 0x58
 8001b94:	f000 808a 	beq.w	8001cac <_printf_i+0x144>
 8001b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b9c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001ba0:	e02a      	b.n	8001bf8 <_printf_i+0x90>
 8001ba2:	2a64      	cmp	r2, #100	; 0x64
 8001ba4:	d001      	beq.n	8001baa <_printf_i+0x42>
 8001ba6:	2a69      	cmp	r2, #105	; 0x69
 8001ba8:	d1f6      	bne.n	8001b98 <_printf_i+0x30>
 8001baa:	6821      	ldr	r1, [r4, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001bb2:	d023      	beq.n	8001bfc <_printf_i+0x94>
 8001bb4:	1d11      	adds	r1, r2, #4
 8001bb6:	6019      	str	r1, [r3, #0]
 8001bb8:	6813      	ldr	r3, [r2, #0]
 8001bba:	e027      	b.n	8001c0c <_printf_i+0xa4>
 8001bbc:	2a73      	cmp	r2, #115	; 0x73
 8001bbe:	f000 80b4 	beq.w	8001d2a <_printf_i+0x1c2>
 8001bc2:	d808      	bhi.n	8001bd6 <_printf_i+0x6e>
 8001bc4:	2a6f      	cmp	r2, #111	; 0x6f
 8001bc6:	d02a      	beq.n	8001c1e <_printf_i+0xb6>
 8001bc8:	2a70      	cmp	r2, #112	; 0x70
 8001bca:	d1e5      	bne.n	8001b98 <_printf_i+0x30>
 8001bcc:	680a      	ldr	r2, [r1, #0]
 8001bce:	f042 0220 	orr.w	r2, r2, #32
 8001bd2:	600a      	str	r2, [r1, #0]
 8001bd4:	e003      	b.n	8001bde <_printf_i+0x76>
 8001bd6:	2a75      	cmp	r2, #117	; 0x75
 8001bd8:	d021      	beq.n	8001c1e <_printf_i+0xb6>
 8001bda:	2a78      	cmp	r2, #120	; 0x78
 8001bdc:	d1dc      	bne.n	8001b98 <_printf_i+0x30>
 8001bde:	2278      	movs	r2, #120	; 0x78
 8001be0:	496f      	ldr	r1, [pc, #444]	; (8001da0 <_printf_i+0x238>)
 8001be2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001be6:	e064      	b.n	8001cb2 <_printf_i+0x14a>
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001bee:	1d11      	adds	r1, r2, #4
 8001bf0:	6019      	str	r1, [r3, #0]
 8001bf2:	6813      	ldr	r3, [r2, #0]
 8001bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0a3      	b.n	8001d44 <_printf_i+0x1dc>
 8001bfc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001c00:	f102 0104 	add.w	r1, r2, #4
 8001c04:	6019      	str	r1, [r3, #0]
 8001c06:	d0d7      	beq.n	8001bb8 <_printf_i+0x50>
 8001c08:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	da03      	bge.n	8001c18 <_printf_i+0xb0>
 8001c10:	222d      	movs	r2, #45	; 0x2d
 8001c12:	425b      	negs	r3, r3
 8001c14:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001c18:	4962      	ldr	r1, [pc, #392]	; (8001da4 <_printf_i+0x23c>)
 8001c1a:	220a      	movs	r2, #10
 8001c1c:	e017      	b.n	8001c4e <_printf_i+0xe6>
 8001c1e:	6820      	ldr	r0, [r4, #0]
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001c26:	d003      	beq.n	8001c30 <_printf_i+0xc8>
 8001c28:	1d08      	adds	r0, r1, #4
 8001c2a:	6018      	str	r0, [r3, #0]
 8001c2c:	680b      	ldr	r3, [r1, #0]
 8001c2e:	e006      	b.n	8001c3e <_printf_i+0xd6>
 8001c30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c34:	f101 0004 	add.w	r0, r1, #4
 8001c38:	6018      	str	r0, [r3, #0]
 8001c3a:	d0f7      	beq.n	8001c2c <_printf_i+0xc4>
 8001c3c:	880b      	ldrh	r3, [r1, #0]
 8001c3e:	2a6f      	cmp	r2, #111	; 0x6f
 8001c40:	bf14      	ite	ne
 8001c42:	220a      	movne	r2, #10
 8001c44:	2208      	moveq	r2, #8
 8001c46:	4957      	ldr	r1, [pc, #348]	; (8001da4 <_printf_i+0x23c>)
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001c4e:	6865      	ldr	r5, [r4, #4]
 8001c50:	2d00      	cmp	r5, #0
 8001c52:	60a5      	str	r5, [r4, #8]
 8001c54:	f2c0 809c 	blt.w	8001d90 <_printf_i+0x228>
 8001c58:	6820      	ldr	r0, [r4, #0]
 8001c5a:	f020 0004 	bic.w	r0, r0, #4
 8001c5e:	6020      	str	r0, [r4, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d13f      	bne.n	8001ce4 <_printf_i+0x17c>
 8001c64:	2d00      	cmp	r5, #0
 8001c66:	f040 8095 	bne.w	8001d94 <_printf_i+0x22c>
 8001c6a:	4675      	mov	r5, lr
 8001c6c:	2a08      	cmp	r2, #8
 8001c6e:	d10b      	bne.n	8001c88 <_printf_i+0x120>
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	07da      	lsls	r2, r3, #31
 8001c74:	d508      	bpl.n	8001c88 <_printf_i+0x120>
 8001c76:	6923      	ldr	r3, [r4, #16]
 8001c78:	6862      	ldr	r2, [r4, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	bfde      	ittt	le
 8001c7e:	2330      	movle	r3, #48	; 0x30
 8001c80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c88:	ebae 0305 	sub.w	r3, lr, r5
 8001c8c:	6123      	str	r3, [r4, #16]
 8001c8e:	f8cd 8000 	str.w	r8, [sp]
 8001c92:	463b      	mov	r3, r7
 8001c94:	aa03      	add	r2, sp, #12
 8001c96:	4621      	mov	r1, r4
 8001c98:	4630      	mov	r0, r6
 8001c9a:	f7ff feed 	bl	8001a78 <_printf_common>
 8001c9e:	3001      	adds	r0, #1
 8001ca0:	d155      	bne.n	8001d4e <_printf_i+0x1e6>
 8001ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca6:	b005      	add	sp, #20
 8001ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cac:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001cb0:	493c      	ldr	r1, [pc, #240]	; (8001da4 <_printf_i+0x23c>)
 8001cb2:	6822      	ldr	r2, [r4, #0]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001cba:	f100 0504 	add.w	r5, r0, #4
 8001cbe:	601d      	str	r5, [r3, #0]
 8001cc0:	d001      	beq.n	8001cc6 <_printf_i+0x15e>
 8001cc2:	6803      	ldr	r3, [r0, #0]
 8001cc4:	e002      	b.n	8001ccc <_printf_i+0x164>
 8001cc6:	0655      	lsls	r5, r2, #25
 8001cc8:	d5fb      	bpl.n	8001cc2 <_printf_i+0x15a>
 8001cca:	8803      	ldrh	r3, [r0, #0]
 8001ccc:	07d0      	lsls	r0, r2, #31
 8001cce:	bf44      	itt	mi
 8001cd0:	f042 0220 	orrmi.w	r2, r2, #32
 8001cd4:	6022      	strmi	r2, [r4, #0]
 8001cd6:	b91b      	cbnz	r3, 8001ce0 <_printf_i+0x178>
 8001cd8:	6822      	ldr	r2, [r4, #0]
 8001cda:	f022 0220 	bic.w	r2, r2, #32
 8001cde:	6022      	str	r2, [r4, #0]
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	e7b1      	b.n	8001c48 <_printf_i+0xe0>
 8001ce4:	4675      	mov	r5, lr
 8001ce6:	fbb3 f0f2 	udiv	r0, r3, r2
 8001cea:	fb02 3310 	mls	r3, r2, r0, r3
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	d1f5      	bne.n	8001ce6 <_printf_i+0x17e>
 8001cfa:	e7b7      	b.n	8001c6c <_printf_i+0x104>
 8001cfc:	6808      	ldr	r0, [r1, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001d04:	6949      	ldr	r1, [r1, #20]
 8001d06:	d004      	beq.n	8001d12 <_printf_i+0x1aa>
 8001d08:	1d10      	adds	r0, r2, #4
 8001d0a:	6018      	str	r0, [r3, #0]
 8001d0c:	6813      	ldr	r3, [r2, #0]
 8001d0e:	6019      	str	r1, [r3, #0]
 8001d10:	e007      	b.n	8001d22 <_printf_i+0x1ba>
 8001d12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d16:	f102 0004 	add.w	r0, r2, #4
 8001d1a:	6018      	str	r0, [r3, #0]
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	d0f6      	beq.n	8001d0e <_printf_i+0x1a6>
 8001d20:	8019      	strh	r1, [r3, #0]
 8001d22:	2300      	movs	r3, #0
 8001d24:	4675      	mov	r5, lr
 8001d26:	6123      	str	r3, [r4, #16]
 8001d28:	e7b1      	b.n	8001c8e <_printf_i+0x126>
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	1d11      	adds	r1, r2, #4
 8001d2e:	6019      	str	r1, [r3, #0]
 8001d30:	6815      	ldr	r5, [r2, #0]
 8001d32:	2100      	movs	r1, #0
 8001d34:	6862      	ldr	r2, [r4, #4]
 8001d36:	4628      	mov	r0, r5
 8001d38:	f000 f8e0 	bl	8001efc <memchr>
 8001d3c:	b108      	cbz	r0, 8001d42 <_printf_i+0x1da>
 8001d3e:	1b40      	subs	r0, r0, r5
 8001d40:	6060      	str	r0, [r4, #4]
 8001d42:	6863      	ldr	r3, [r4, #4]
 8001d44:	6123      	str	r3, [r4, #16]
 8001d46:	2300      	movs	r3, #0
 8001d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d4c:	e79f      	b.n	8001c8e <_printf_i+0x126>
 8001d4e:	6923      	ldr	r3, [r4, #16]
 8001d50:	462a      	mov	r2, r5
 8001d52:	4639      	mov	r1, r7
 8001d54:	4630      	mov	r0, r6
 8001d56:	47c0      	blx	r8
 8001d58:	3001      	adds	r0, #1
 8001d5a:	d0a2      	beq.n	8001ca2 <_printf_i+0x13a>
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	079b      	lsls	r3, r3, #30
 8001d60:	d507      	bpl.n	8001d72 <_printf_i+0x20a>
 8001d62:	2500      	movs	r5, #0
 8001d64:	f104 0919 	add.w	r9, r4, #25
 8001d68:	68e3      	ldr	r3, [r4, #12]
 8001d6a:	9a03      	ldr	r2, [sp, #12]
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	429d      	cmp	r5, r3
 8001d70:	db05      	blt.n	8001d7e <_printf_i+0x216>
 8001d72:	68e0      	ldr	r0, [r4, #12]
 8001d74:	9b03      	ldr	r3, [sp, #12]
 8001d76:	4298      	cmp	r0, r3
 8001d78:	bfb8      	it	lt
 8001d7a:	4618      	movlt	r0, r3
 8001d7c:	e793      	b.n	8001ca6 <_printf_i+0x13e>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	464a      	mov	r2, r9
 8001d82:	4639      	mov	r1, r7
 8001d84:	4630      	mov	r0, r6
 8001d86:	47c0      	blx	r8
 8001d88:	3001      	adds	r0, #1
 8001d8a:	d08a      	beq.n	8001ca2 <_printf_i+0x13a>
 8001d8c:	3501      	adds	r5, #1
 8001d8e:	e7eb      	b.n	8001d68 <_printf_i+0x200>
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1a7      	bne.n	8001ce4 <_printf_i+0x17c>
 8001d94:	780b      	ldrb	r3, [r1, #0]
 8001d96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d9e:	e765      	b.n	8001c6c <_printf_i+0x104>
 8001da0:	08002092 	.word	0x08002092
 8001da4:	08002081 	.word	0x08002081

08001da8 <_sbrk_r>:
 8001da8:	b538      	push	{r3, r4, r5, lr}
 8001daa:	2300      	movs	r3, #0
 8001dac:	4c05      	ldr	r4, [pc, #20]	; (8001dc4 <_sbrk_r+0x1c>)
 8001dae:	4605      	mov	r5, r0
 8001db0:	4608      	mov	r0, r1
 8001db2:	6023      	str	r3, [r4, #0]
 8001db4:	f000 f8ec 	bl	8001f90 <_sbrk>
 8001db8:	1c43      	adds	r3, r0, #1
 8001dba:	d102      	bne.n	8001dc2 <_sbrk_r+0x1a>
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	b103      	cbz	r3, 8001dc2 <_sbrk_r+0x1a>
 8001dc0:	602b      	str	r3, [r5, #0]
 8001dc2:	bd38      	pop	{r3, r4, r5, pc}
 8001dc4:	200000dc 	.word	0x200000dc

08001dc8 <__sread>:
 8001dc8:	b510      	push	{r4, lr}
 8001dca:	460c      	mov	r4, r1
 8001dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dd0:	f000 f8a4 	bl	8001f1c <_read_r>
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	bfab      	itete	ge
 8001dd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001dda:	89a3      	ldrhlt	r3, [r4, #12]
 8001ddc:	181b      	addge	r3, r3, r0
 8001dde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001de2:	bfac      	ite	ge
 8001de4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001de6:	81a3      	strhlt	r3, [r4, #12]
 8001de8:	bd10      	pop	{r4, pc}

08001dea <__swrite>:
 8001dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dee:	461f      	mov	r7, r3
 8001df0:	898b      	ldrh	r3, [r1, #12]
 8001df2:	4605      	mov	r5, r0
 8001df4:	05db      	lsls	r3, r3, #23
 8001df6:	460c      	mov	r4, r1
 8001df8:	4616      	mov	r6, r2
 8001dfa:	d505      	bpl.n	8001e08 <__swrite+0x1e>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e04:	f000 f868 	bl	8001ed8 <_lseek_r>
 8001e08:	89a3      	ldrh	r3, [r4, #12]
 8001e0a:	4632      	mov	r2, r6
 8001e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e10:	81a3      	strh	r3, [r4, #12]
 8001e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e16:	463b      	mov	r3, r7
 8001e18:	4628      	mov	r0, r5
 8001e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e1e:	f000 b817 	b.w	8001e50 <_write_r>

08001e22 <__sseek>:
 8001e22:	b510      	push	{r4, lr}
 8001e24:	460c      	mov	r4, r1
 8001e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e2a:	f000 f855 	bl	8001ed8 <_lseek_r>
 8001e2e:	1c43      	adds	r3, r0, #1
 8001e30:	89a3      	ldrh	r3, [r4, #12]
 8001e32:	bf15      	itete	ne
 8001e34:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e3e:	81a3      	strheq	r3, [r4, #12]
 8001e40:	bf18      	it	ne
 8001e42:	81a3      	strhne	r3, [r4, #12]
 8001e44:	bd10      	pop	{r4, pc}

08001e46 <__sclose>:
 8001e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e4a:	f000 b813 	b.w	8001e74 <_close_r>
	...

08001e50 <_write_r>:
 8001e50:	b538      	push	{r3, r4, r5, lr}
 8001e52:	4605      	mov	r5, r0
 8001e54:	4608      	mov	r0, r1
 8001e56:	4611      	mov	r1, r2
 8001e58:	2200      	movs	r2, #0
 8001e5a:	4c05      	ldr	r4, [pc, #20]	; (8001e70 <_write_r+0x20>)
 8001e5c:	6022      	str	r2, [r4, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	f7fe ff76 	bl	8000d50 <_write>
 8001e64:	1c43      	adds	r3, r0, #1
 8001e66:	d102      	bne.n	8001e6e <_write_r+0x1e>
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	b103      	cbz	r3, 8001e6e <_write_r+0x1e>
 8001e6c:	602b      	str	r3, [r5, #0]
 8001e6e:	bd38      	pop	{r3, r4, r5, pc}
 8001e70:	200000dc 	.word	0x200000dc

08001e74 <_close_r>:
 8001e74:	b538      	push	{r3, r4, r5, lr}
 8001e76:	2300      	movs	r3, #0
 8001e78:	4c05      	ldr	r4, [pc, #20]	; (8001e90 <_close_r+0x1c>)
 8001e7a:	4605      	mov	r5, r0
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	6023      	str	r3, [r4, #0]
 8001e80:	f000 f85e 	bl	8001f40 <_close>
 8001e84:	1c43      	adds	r3, r0, #1
 8001e86:	d102      	bne.n	8001e8e <_close_r+0x1a>
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	b103      	cbz	r3, 8001e8e <_close_r+0x1a>
 8001e8c:	602b      	str	r3, [r5, #0]
 8001e8e:	bd38      	pop	{r3, r4, r5, pc}
 8001e90:	200000dc 	.word	0x200000dc

08001e94 <_fstat_r>:
 8001e94:	b538      	push	{r3, r4, r5, lr}
 8001e96:	2300      	movs	r3, #0
 8001e98:	4c06      	ldr	r4, [pc, #24]	; (8001eb4 <_fstat_r+0x20>)
 8001e9a:	4605      	mov	r5, r0
 8001e9c:	4608      	mov	r0, r1
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	6023      	str	r3, [r4, #0]
 8001ea2:	f000 f855 	bl	8001f50 <_fstat>
 8001ea6:	1c43      	adds	r3, r0, #1
 8001ea8:	d102      	bne.n	8001eb0 <_fstat_r+0x1c>
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	b103      	cbz	r3, 8001eb0 <_fstat_r+0x1c>
 8001eae:	602b      	str	r3, [r5, #0]
 8001eb0:	bd38      	pop	{r3, r4, r5, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200000dc 	.word	0x200000dc

08001eb8 <_isatty_r>:
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	2300      	movs	r3, #0
 8001ebc:	4c05      	ldr	r4, [pc, #20]	; (8001ed4 <_isatty_r+0x1c>)
 8001ebe:	4605      	mov	r5, r0
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	6023      	str	r3, [r4, #0]
 8001ec4:	f000 f84c 	bl	8001f60 <_isatty>
 8001ec8:	1c43      	adds	r3, r0, #1
 8001eca:	d102      	bne.n	8001ed2 <_isatty_r+0x1a>
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	b103      	cbz	r3, 8001ed2 <_isatty_r+0x1a>
 8001ed0:	602b      	str	r3, [r5, #0]
 8001ed2:	bd38      	pop	{r3, r4, r5, pc}
 8001ed4:	200000dc 	.word	0x200000dc

08001ed8 <_lseek_r>:
 8001ed8:	b538      	push	{r3, r4, r5, lr}
 8001eda:	4605      	mov	r5, r0
 8001edc:	4608      	mov	r0, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4c05      	ldr	r4, [pc, #20]	; (8001ef8 <_lseek_r+0x20>)
 8001ee4:	6022      	str	r2, [r4, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f000 f842 	bl	8001f70 <_lseek>
 8001eec:	1c43      	adds	r3, r0, #1
 8001eee:	d102      	bne.n	8001ef6 <_lseek_r+0x1e>
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	b103      	cbz	r3, 8001ef6 <_lseek_r+0x1e>
 8001ef4:	602b      	str	r3, [r5, #0]
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}
 8001ef8:	200000dc 	.word	0x200000dc

08001efc <memchr>:
 8001efc:	b510      	push	{r4, lr}
 8001efe:	b2c9      	uxtb	r1, r1
 8001f00:	4402      	add	r2, r0
 8001f02:	4290      	cmp	r0, r2
 8001f04:	4603      	mov	r3, r0
 8001f06:	d101      	bne.n	8001f0c <memchr+0x10>
 8001f08:	2000      	movs	r0, #0
 8001f0a:	bd10      	pop	{r4, pc}
 8001f0c:	781c      	ldrb	r4, [r3, #0]
 8001f0e:	3001      	adds	r0, #1
 8001f10:	428c      	cmp	r4, r1
 8001f12:	d1f6      	bne.n	8001f02 <memchr+0x6>
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd10      	pop	{r4, pc}

08001f18 <__malloc_lock>:
 8001f18:	4770      	bx	lr

08001f1a <__malloc_unlock>:
 8001f1a:	4770      	bx	lr

08001f1c <_read_r>:
 8001f1c:	b538      	push	{r3, r4, r5, lr}
 8001f1e:	4605      	mov	r5, r0
 8001f20:	4608      	mov	r0, r1
 8001f22:	4611      	mov	r1, r2
 8001f24:	2200      	movs	r2, #0
 8001f26:	4c05      	ldr	r4, [pc, #20]	; (8001f3c <_read_r+0x20>)
 8001f28:	6022      	str	r2, [r4, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f000 f828 	bl	8001f80 <_read>
 8001f30:	1c43      	adds	r3, r0, #1
 8001f32:	d102      	bne.n	8001f3a <_read_r+0x1e>
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	b103      	cbz	r3, 8001f3a <_read_r+0x1e>
 8001f38:	602b      	str	r3, [r5, #0]
 8001f3a:	bd38      	pop	{r3, r4, r5, pc}
 8001f3c:	200000dc 	.word	0x200000dc

08001f40 <_close>:
 8001f40:	2258      	movs	r2, #88	; 0x58
 8001f42:	4b02      	ldr	r3, [pc, #8]	; (8001f4c <_close+0xc>)
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	4770      	bx	lr
 8001f4c:	200000dc 	.word	0x200000dc

08001f50 <_fstat>:
 8001f50:	2258      	movs	r2, #88	; 0x58
 8001f52:	4b02      	ldr	r3, [pc, #8]	; (8001f5c <_fstat+0xc>)
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	4770      	bx	lr
 8001f5c:	200000dc 	.word	0x200000dc

08001f60 <_isatty>:
 8001f60:	2258      	movs	r2, #88	; 0x58
 8001f62:	4b02      	ldr	r3, [pc, #8]	; (8001f6c <_isatty+0xc>)
 8001f64:	2000      	movs	r0, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	200000dc 	.word	0x200000dc

08001f70 <_lseek>:
 8001f70:	2258      	movs	r2, #88	; 0x58
 8001f72:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <_lseek+0xc>)
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	4770      	bx	lr
 8001f7c:	200000dc 	.word	0x200000dc

08001f80 <_read>:
 8001f80:	2258      	movs	r2, #88	; 0x58
 8001f82:	4b02      	ldr	r3, [pc, #8]	; (8001f8c <_read+0xc>)
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	4770      	bx	lr
 8001f8c:	200000dc 	.word	0x200000dc

08001f90 <_sbrk>:
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <_sbrk+0x14>)
 8001f92:	4602      	mov	r2, r0
 8001f94:	6819      	ldr	r1, [r3, #0]
 8001f96:	b909      	cbnz	r1, 8001f9c <_sbrk+0xc>
 8001f98:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <_sbrk+0x18>)
 8001f9a:	6019      	str	r1, [r3, #0]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	4402      	add	r2, r0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	4770      	bx	lr
 8001fa4:	20000094 	.word	0x20000094
 8001fa8:	200000e0 	.word	0x200000e0

08001fac <_init>:
 8001fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fae:	bf00      	nop
 8001fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb2:	bc08      	pop	{r3}
 8001fb4:	469e      	mov	lr, r3
 8001fb6:	4770      	bx	lr

08001fb8 <_fini>:
 8001fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fba:	bf00      	nop
 8001fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fbe:	bc08      	pop	{r3}
 8001fc0:	469e      	mov	lr, r3
 8001fc2:	4770      	bx	lr
