
FirstBluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001340  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800144c  0800144c  0001144c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001474  08001474  00011474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001478  08001478  00011478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800147c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000138  2000000c  08001488  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000144  08001488  00020144  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000106f5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002254  00000000  00000000  0003072a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005980  00000000  00000000  0003297e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000748  00000000  00000000  00038300  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b28  00000000  00000000  00038a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000053df  00000000  00000000  00039570  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002de6  00000000  00000000  0003e94f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00041735  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001524  00000000  00000000  000417b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001434 	.word	0x08001434

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001434 	.word	0x08001434

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f9b8 	bl	80004d8 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f97a 	bl	8000470 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f953 	bl	800044c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 ffe8 	bl	8001180 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000200:	2300      	movs	r3, #0
{ 
 8000202:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000204:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000206:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800020a:	2b01      	cmp	r3, #1
 800020c:	d074      	beq.n	80002f8 <HAL_ADC_ConfigChannel+0xf8>
 800020e:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000210:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000212:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000216:	2d06      	cmp	r5, #6
 8000218:	6802      	ldr	r2, [r0, #0]
 800021a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800021e:	680c      	ldr	r4, [r1, #0]
 8000220:	d825      	bhi.n	800026e <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000222:	442b      	add	r3, r5
 8000224:	251f      	movs	r5, #31
 8000226:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000228:	3b05      	subs	r3, #5
 800022a:	409d      	lsls	r5, r3
 800022c:	ea26 0505 	bic.w	r5, r6, r5
 8000230:	fa04 f303 	lsl.w	r3, r4, r3
 8000234:	432b      	orrs	r3, r5
 8000236:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000238:	2c09      	cmp	r4, #9
 800023a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800023e:	688d      	ldr	r5, [r1, #8]
 8000240:	d92f      	bls.n	80002a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000242:	2607      	movs	r6, #7
 8000244:	4423      	add	r3, r4
 8000246:	68d1      	ldr	r1, [r2, #12]
 8000248:	3b1e      	subs	r3, #30
 800024a:	409e      	lsls	r6, r3
 800024c:	ea21 0106 	bic.w	r1, r1, r6
 8000250:	fa05 f303 	lsl.w	r3, r5, r3
 8000254:	430b      	orrs	r3, r1
 8000256:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000258:	f1a4 0310 	sub.w	r3, r4, #16
 800025c:	2b01      	cmp	r3, #1
 800025e:	d92b      	bls.n	80002b8 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000260:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000262:	2200      	movs	r2, #0
 8000264:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000268:	4618      	mov	r0, r3
 800026a:	b002      	add	sp, #8
 800026c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800026e:	2d0c      	cmp	r5, #12
 8000270:	d80b      	bhi.n	800028a <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000272:	442b      	add	r3, r5
 8000274:	251f      	movs	r5, #31
 8000276:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000278:	3b23      	subs	r3, #35	; 0x23
 800027a:	409d      	lsls	r5, r3
 800027c:	ea26 0505 	bic.w	r5, r6, r5
 8000280:	fa04 f303 	lsl.w	r3, r4, r3
 8000284:	432b      	orrs	r3, r5
 8000286:	6313      	str	r3, [r2, #48]	; 0x30
 8000288:	e7d6      	b.n	8000238 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800028a:	442b      	add	r3, r5
 800028c:	251f      	movs	r5, #31
 800028e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000290:	3b41      	subs	r3, #65	; 0x41
 8000292:	409d      	lsls	r5, r3
 8000294:	ea26 0505 	bic.w	r5, r6, r5
 8000298:	fa04 f303 	lsl.w	r3, r4, r3
 800029c:	432b      	orrs	r3, r5
 800029e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80002a0:	e7ca      	b.n	8000238 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80002a2:	2607      	movs	r6, #7
 80002a4:	6911      	ldr	r1, [r2, #16]
 80002a6:	4423      	add	r3, r4
 80002a8:	409e      	lsls	r6, r3
 80002aa:	ea21 0106 	bic.w	r1, r1, r6
 80002ae:	fa05 f303 	lsl.w	r3, r5, r3
 80002b2:	430b      	orrs	r3, r1
 80002b4:	6113      	str	r3, [r2, #16]
 80002b6:	e7cf      	b.n	8000258 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <HAL_ADC_ConfigChannel+0xfc>)
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d116      	bne.n	80002ec <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80002be:	6893      	ldr	r3, [r2, #8]
 80002c0:	021b      	lsls	r3, r3, #8
 80002c2:	d4cd      	bmi.n	8000260 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002c4:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002c6:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002cc:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002ce:	d1c7      	bne.n	8000260 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002d0:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <HAL_ADC_ConfigChannel+0x100>)
 80002d2:	4a0c      	ldr	r2, [pc, #48]	; (8000304 <HAL_ADC_ConfigChannel+0x104>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80002da:	230a      	movs	r3, #10
 80002dc:	4353      	muls	r3, r2
            wait_loop_index--;
 80002de:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002e0:	9b01      	ldr	r3, [sp, #4]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0bc      	beq.n	8000260 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80002e6:	9b01      	ldr	r3, [sp, #4]
 80002e8:	3b01      	subs	r3, #1
 80002ea:	e7f8      	b.n	80002de <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002f4:	2301      	movs	r3, #1
 80002f6:	e7b4      	b.n	8000262 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80002f8:	2302      	movs	r3, #2
 80002fa:	e7b5      	b.n	8000268 <HAL_ADC_ConfigChannel+0x68>
 80002fc:	40012400 	.word	0x40012400
 8000300:	20000008 	.word	0x20000008
 8000304:	000f4240 	.word	0x000f4240

08000308 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000308:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800030a:	6803      	ldr	r3, [r0, #0]
{
 800030c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800030e:	689a      	ldr	r2, [r3, #8]
 8000310:	07d2      	lsls	r2, r2, #31
 8000312:	d401      	bmi.n	8000318 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000314:	2000      	movs	r0, #0
 8000316:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000318:	689a      	ldr	r2, [r3, #8]
 800031a:	f022 0201 	bic.w	r2, r2, #1
 800031e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000320:	f7ff ff56 	bl	80001d0 <HAL_GetTick>
 8000324:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000326:	6823      	ldr	r3, [r4, #0]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	07db      	lsls	r3, r3, #31
 800032c:	d5f2      	bpl.n	8000314 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800032e:	f7ff ff4f 	bl	80001d0 <HAL_GetTick>
 8000332:	1b40      	subs	r0, r0, r5
 8000334:	2802      	cmp	r0, #2
 8000336:	d9f6      	bls.n	8000326 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000338:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800033a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800033c:	f043 0310 	orr.w	r3, r3, #16
 8000340:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000342:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	62e3      	str	r3, [r4, #44]	; 0x2c
 800034a:	bd38      	pop	{r3, r4, r5, pc}

0800034c <HAL_ADC_Init>:
{
 800034c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800034e:	4604      	mov	r4, r0
 8000350:	2800      	cmp	r0, #0
 8000352:	d071      	beq.n	8000438 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000354:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000356:	b923      	cbnz	r3, 8000362 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000358:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800035a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800035e:	f000 ff5f 	bl	8001220 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000362:	4620      	mov	r0, r4
 8000364:	f7ff ffd0 	bl	8000308 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000368:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800036a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800036e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000370:	d164      	bne.n	800043c <HAL_ADC_Init+0xf0>
 8000372:	2800      	cmp	r0, #0
 8000374:	d162      	bne.n	800043c <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000376:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000378:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800037c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800037e:	f023 0302 	bic.w	r3, r3, #2
 8000382:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000386:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000388:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800038a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800038c:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800038e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000392:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000396:	d038      	beq.n	800040a <HAL_ADC_Init+0xbe>
 8000398:	2901      	cmp	r1, #1
 800039a:	bf14      	ite	ne
 800039c:	4606      	movne	r6, r0
 800039e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003a2:	6965      	ldr	r5, [r4, #20]
 80003a4:	2d01      	cmp	r5, #1
 80003a6:	d107      	bne.n	80003b8 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d130      	bne.n	800040e <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80003ac:	69a3      	ldr	r3, [r4, #24]
 80003ae:	3b01      	subs	r3, #1
 80003b0:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80003b4:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80003b8:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003ba:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80003be:	685d      	ldr	r5, [r3, #4]
 80003c0:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80003c4:	ea45 0506 	orr.w	r5, r5, r6
 80003c8:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80003ca:	689e      	ldr	r6, [r3, #8]
 80003cc:	4d1d      	ldr	r5, [pc, #116]	; (8000444 <HAL_ADC_Init+0xf8>)
 80003ce:	ea05 0506 	and.w	r5, r5, r6
 80003d2:	ea45 0502 	orr.w	r5, r5, r2
 80003d6:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003d8:	d001      	beq.n	80003de <HAL_ADC_Init+0x92>
 80003da:	2901      	cmp	r1, #1
 80003dc:	d120      	bne.n	8000420 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80003de:	6921      	ldr	r1, [r4, #16]
 80003e0:	3901      	subs	r1, #1
 80003e2:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80003e4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80003e6:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80003ea:	4329      	orrs	r1, r5
 80003ec:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003ee:	6899      	ldr	r1, [r3, #8]
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <HAL_ADC_Init+0xfc>)
 80003f2:	400b      	ands	r3, r1
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d115      	bne.n	8000424 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80003f8:	2300      	movs	r3, #0
 80003fa:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80003fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003fe:	f023 0303 	bic.w	r3, r3, #3
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	62a3      	str	r3, [r4, #40]	; 0x28
 8000408:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800040a:	460e      	mov	r6, r1
 800040c:	e7c9      	b.n	80003a2 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800040e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000410:	f043 0320 	orr.w	r3, r3, #32
 8000414:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000416:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800041e:	e7cb      	b.n	80003b8 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000420:	2100      	movs	r1, #0
 8000422:	e7df      	b.n	80003e4 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000424:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000426:	f023 0312 	bic.w	r3, r3, #18
 800042a:	f043 0310 	orr.w	r3, r3, #16
 800042e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000430:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000438:	2001      	movs	r0, #1
}
 800043a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800043c:	f043 0310 	orr.w	r3, r3, #16
 8000440:	62a3      	str	r3, [r4, #40]	; 0x28
 8000442:	e7f9      	b.n	8000438 <HAL_ADC_Init+0xec>
 8000444:	ffe1f7fd 	.word	0xffe1f7fd
 8000448:	ff1f0efe 	.word	0xff1f0efe

0800044c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800044c:	4a07      	ldr	r2, [pc, #28]	; (800046c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800044e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000450:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000452:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000456:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800045a:	041b      	lsls	r3, r3, #16
 800045c:	0c1b      	lsrs	r3, r3, #16
 800045e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000466:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000468:	60d3      	str	r3, [r2, #12]
 800046a:	4770      	bx	lr
 800046c:	e000ed00 	.word	0xe000ed00

08000470 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000470:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	68dc      	ldr	r4, [r3, #12]
 8000476:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800047a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800047e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000480:	2b04      	cmp	r3, #4
 8000482:	bf28      	it	cs
 8000484:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000486:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000488:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800048c:	bf98      	it	ls
 800048e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000490:	fa05 f303 	lsl.w	r3, r5, r3
 8000494:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000498:	bf88      	it	hi
 800049a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800049c:	4019      	ands	r1, r3
 800049e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004a0:	fa05 f404 	lsl.w	r4, r5, r4
 80004a4:	3c01      	subs	r4, #1
 80004a6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80004a8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004aa:	ea42 0201 	orr.w	r2, r2, r1
 80004ae:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b2:	bfaf      	iteee	ge
 80004b4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b8:	4b06      	ldrlt	r3, [pc, #24]	; (80004d4 <HAL_NVIC_SetPriority+0x64>)
 80004ba:	f000 000f 	andlt.w	r0, r0, #15
 80004be:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c0:	bfa5      	ittet	ge
 80004c2:	b2d2      	uxtbge	r2, r2
 80004c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ca:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	e000ed00 	.word	0xe000ed00
 80004d4:	e000ed14 	.word	0xe000ed14

080004d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004d8:	3801      	subs	r0, #1
 80004da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004de:	d20a      	bcs.n	80004f6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004e6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004ec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004f0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	e000e010 	.word	0xe000e010
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000506:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	bf0c      	ite	eq
 800050c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000510:	f022 0204 	bicne.w	r2, r2, #4
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	4770      	bx	lr
 8000518:	e000e010 	.word	0xe000e010

0800051c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800051c:	4770      	bx	lr

0800051e <HAL_SYSTICK_IRQHandler>:
{
 800051e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000520:	f7ff fffc 	bl	800051c <HAL_SYSTICK_Callback>
 8000524:	bd08      	pop	{r3, pc}
	...

08000528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800052c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800052e:	4616      	mov	r6, r2
 8000530:	4b65      	ldr	r3, [pc, #404]	; (80006c8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000532:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80006d8 <HAL_GPIO_Init+0x1b0>
 8000536:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80006dc <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800053a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800053e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000540:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000544:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000548:	45a0      	cmp	r8, r4
 800054a:	d17f      	bne.n	800064c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800054c:	684d      	ldr	r5, [r1, #4]
 800054e:	2d12      	cmp	r5, #18
 8000550:	f000 80af 	beq.w	80006b2 <HAL_GPIO_Init+0x18a>
 8000554:	f200 8088 	bhi.w	8000668 <HAL_GPIO_Init+0x140>
 8000558:	2d02      	cmp	r5, #2
 800055a:	f000 80a7 	beq.w	80006ac <HAL_GPIO_Init+0x184>
 800055e:	d87c      	bhi.n	800065a <HAL_GPIO_Init+0x132>
 8000560:	2d00      	cmp	r5, #0
 8000562:	f000 808e 	beq.w	8000682 <HAL_GPIO_Init+0x15a>
 8000566:	2d01      	cmp	r5, #1
 8000568:	f000 809e 	beq.w	80006a8 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800056c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000570:	2cff      	cmp	r4, #255	; 0xff
 8000572:	bf93      	iteet	ls
 8000574:	4682      	movls	sl, r0
 8000576:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800057a:	3d08      	subhi	r5, #8
 800057c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000580:	bf92      	itee	ls
 8000582:	00b5      	lslls	r5, r6, #2
 8000584:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000588:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800058a:	fa09 f805 	lsl.w	r8, r9, r5
 800058e:	ea2b 0808 	bic.w	r8, fp, r8
 8000592:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000596:	bf88      	it	hi
 8000598:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800059c:	ea48 0505 	orr.w	r5, r8, r5
 80005a0:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005a4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80005a8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80005ac:	d04e      	beq.n	800064c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005ae:	4d47      	ldr	r5, [pc, #284]	; (80006cc <HAL_GPIO_Init+0x1a4>)
 80005b0:	4f46      	ldr	r7, [pc, #280]	; (80006cc <HAL_GPIO_Init+0x1a4>)
 80005b2:	69ad      	ldr	r5, [r5, #24]
 80005b4:	f026 0803 	bic.w	r8, r6, #3
 80005b8:	f045 0501 	orr.w	r5, r5, #1
 80005bc:	61bd      	str	r5, [r7, #24]
 80005be:	69bd      	ldr	r5, [r7, #24]
 80005c0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80005c4:	f005 0501 	and.w	r5, r5, #1
 80005c8:	9501      	str	r5, [sp, #4]
 80005ca:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005ce:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005d2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005d4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80005d8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005dc:	fa09 f90b 	lsl.w	r9, r9, fp
 80005e0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005e4:	4d3a      	ldr	r5, [pc, #232]	; (80006d0 <HAL_GPIO_Init+0x1a8>)
 80005e6:	42a8      	cmp	r0, r5
 80005e8:	d068      	beq.n	80006bc <HAL_GPIO_Init+0x194>
 80005ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005ee:	42a8      	cmp	r0, r5
 80005f0:	d066      	beq.n	80006c0 <HAL_GPIO_Init+0x198>
 80005f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005f6:	42a8      	cmp	r0, r5
 80005f8:	d064      	beq.n	80006c4 <HAL_GPIO_Init+0x19c>
 80005fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005fe:	42a8      	cmp	r0, r5
 8000600:	bf0c      	ite	eq
 8000602:	2503      	moveq	r5, #3
 8000604:	2504      	movne	r5, #4
 8000606:	fa05 f50b 	lsl.w	r5, r5, fp
 800060a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800060e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000612:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000614:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000618:	bf14      	ite	ne
 800061a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800061c:	43a5      	biceq	r5, r4
 800061e:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000620:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000622:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000626:	bf14      	ite	ne
 8000628:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800062a:	43a5      	biceq	r5, r4
 800062c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800062e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000630:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000634:	bf14      	ite	ne
 8000636:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000638:	43a5      	biceq	r5, r4
 800063a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800063c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800063e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000642:	bf14      	ite	ne
 8000644:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000646:	ea25 0404 	biceq.w	r4, r5, r4
 800064a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800064c:	3601      	adds	r6, #1
 800064e:	2e10      	cmp	r6, #16
 8000650:	f47f af73 	bne.w	800053a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000654:	b003      	add	sp, #12
 8000656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800065a:	2d03      	cmp	r5, #3
 800065c:	d022      	beq.n	80006a4 <HAL_GPIO_Init+0x17c>
 800065e:	2d11      	cmp	r5, #17
 8000660:	d184      	bne.n	800056c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000662:	68ca      	ldr	r2, [r1, #12]
 8000664:	3204      	adds	r2, #4
          break;
 8000666:	e781      	b.n	800056c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000668:	4f1a      	ldr	r7, [pc, #104]	; (80006d4 <HAL_GPIO_Init+0x1ac>)
 800066a:	42bd      	cmp	r5, r7
 800066c:	d009      	beq.n	8000682 <HAL_GPIO_Init+0x15a>
 800066e:	d812      	bhi.n	8000696 <HAL_GPIO_Init+0x16e>
 8000670:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80006e0 <HAL_GPIO_Init+0x1b8>
 8000674:	454d      	cmp	r5, r9
 8000676:	d004      	beq.n	8000682 <HAL_GPIO_Init+0x15a>
 8000678:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800067c:	454d      	cmp	r5, r9
 800067e:	f47f af75 	bne.w	800056c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000682:	688a      	ldr	r2, [r1, #8]
 8000684:	b1c2      	cbz	r2, 80006b8 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000686:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000688:	bf0c      	ite	eq
 800068a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800068e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000692:	2208      	movs	r2, #8
 8000694:	e76a      	b.n	800056c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000696:	4575      	cmp	r5, lr
 8000698:	d0f3      	beq.n	8000682 <HAL_GPIO_Init+0x15a>
 800069a:	4565      	cmp	r5, ip
 800069c:	d0f1      	beq.n	8000682 <HAL_GPIO_Init+0x15a>
 800069e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80006e4 <HAL_GPIO_Init+0x1bc>
 80006a2:	e7eb      	b.n	800067c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80006a4:	2200      	movs	r2, #0
 80006a6:	e761      	b.n	800056c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80006a8:	68ca      	ldr	r2, [r1, #12]
          break;
 80006aa:	e75f      	b.n	800056c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006ac:	68ca      	ldr	r2, [r1, #12]
 80006ae:	3208      	adds	r2, #8
          break;
 80006b0:	e75c      	b.n	800056c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006b2:	68ca      	ldr	r2, [r1, #12]
 80006b4:	320c      	adds	r2, #12
          break;
 80006b6:	e759      	b.n	800056c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006b8:	2204      	movs	r2, #4
 80006ba:	e757      	b.n	800056c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006bc:	2500      	movs	r5, #0
 80006be:	e7a2      	b.n	8000606 <HAL_GPIO_Init+0xde>
 80006c0:	2501      	movs	r5, #1
 80006c2:	e7a0      	b.n	8000606 <HAL_GPIO_Init+0xde>
 80006c4:	2502      	movs	r5, #2
 80006c6:	e79e      	b.n	8000606 <HAL_GPIO_Init+0xde>
 80006c8:	40010400 	.word	0x40010400
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40010800 	.word	0x40010800
 80006d4:	10210000 	.word	0x10210000
 80006d8:	10310000 	.word	0x10310000
 80006dc:	10320000 	.word	0x10320000
 80006e0:	10110000 	.word	0x10110000
 80006e4:	10220000 	.word	0x10220000

080006e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006e8:	b10a      	cbz	r2, 80006ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80006ea:	6101      	str	r1, [r0, #16]
 80006ec:	4770      	bx	lr
 80006ee:	0409      	lsls	r1, r1, #16
 80006f0:	e7fb      	b.n	80006ea <HAL_GPIO_WritePin+0x2>

080006f2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80006f2:	68c3      	ldr	r3, [r0, #12]
 80006f4:	4059      	eors	r1, r3
 80006f6:	60c1      	str	r1, [r0, #12]
 80006f8:	4770      	bx	lr
	...

080006fc <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80006fc:	b538      	push	{r3, r4, r5, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80006fe:	4604      	mov	r4, r0
 8000700:	b908      	cbnz	r0, 8000706 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8000702:	2001      	movs	r0, #1
 8000704:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000706:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800070a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800070e:	b91b      	cbnz	r3, 8000718 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000710:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000714:	f000 fda4 	bl	8001260 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000718:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800071a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800071c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000720:	6813      	ldr	r3, [r2, #0]
 8000722:	f023 0301 	bic.w	r3, r3, #1
 8000726:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000728:	f000 fada 	bl	8000ce0 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800072c:	6863      	ldr	r3, [r4, #4]
 800072e:	4a2f      	ldr	r2, [pc, #188]	; (80007ec <HAL_I2C_Init+0xf0>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d830      	bhi.n	8000796 <HAL_I2C_Init+0x9a>
 8000734:	4a2e      	ldr	r2, [pc, #184]	; (80007f0 <HAL_I2C_Init+0xf4>)
 8000736:	4290      	cmp	r0, r2
 8000738:	d9e3      	bls.n	8000702 <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800073a:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <HAL_I2C_Init+0xf8>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800073c:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800073e:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8000742:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000744:	3201      	adds	r2, #1
 8000746:	620a      	str	r2, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000748:	4a28      	ldr	r2, [pc, #160]	; (80007ec <HAL_I2C_Init+0xf0>)
 800074a:	3801      	subs	r0, #1
 800074c:	4293      	cmp	r3, r2
 800074e:	d832      	bhi.n	80007b6 <HAL_I2C_Init+0xba>
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	fbb0 f0f3 	udiv	r0, r0, r3
 8000756:	1c43      	adds	r3, r0, #1
 8000758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800075c:	2b04      	cmp	r3, #4
 800075e:	bf38      	it	cc
 8000760:	2304      	movcc	r3, #4
 8000762:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000764:	6a22      	ldr	r2, [r4, #32]
 8000766:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000768:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800076a:	4313      	orrs	r3, r2
 800076c:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800076e:	68e2      	ldr	r2, [r4, #12]
 8000770:	6923      	ldr	r3, [r4, #16]
 8000772:	4313      	orrs	r3, r2
 8000774:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000776:	69a2      	ldr	r2, [r4, #24]
 8000778:	6963      	ldr	r3, [r4, #20]
 800077a:	4313      	orrs	r3, r2
 800077c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800077e:	680b      	ldr	r3, [r1, #0]
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000786:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000788:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800078a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800078e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000790:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000794:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000796:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <HAL_I2C_Init+0xfc>)
 8000798:	4290      	cmp	r0, r2
 800079a:	d9b2      	bls.n	8000702 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800079c:	4d15      	ldr	r5, [pc, #84]	; (80007f4 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800079e:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80007a2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80007a6:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80007a8:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80007aa:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80007ac:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80007b0:	fbb2 f2f5 	udiv	r2, r2, r5
 80007b4:	e7c6      	b.n	8000744 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80007b6:	68a2      	ldr	r2, [r4, #8]
 80007b8:	b952      	cbnz	r2, 80007d0 <HAL_I2C_Init+0xd4>
 80007ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80007be:	fbb0 f0f3 	udiv	r0, r0, r3
 80007c2:	1c43      	adds	r3, r0, #1
 80007c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007c8:	b16b      	cbz	r3, 80007e6 <HAL_I2C_Init+0xea>
 80007ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ce:	e7c8      	b.n	8000762 <HAL_I2C_Init+0x66>
 80007d0:	2219      	movs	r2, #25
 80007d2:	4353      	muls	r3, r2
 80007d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80007d8:	1c43      	adds	r3, r0, #1
 80007da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007de:	b113      	cbz	r3, 80007e6 <HAL_I2C_Init+0xea>
 80007e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e4:	e7bd      	b.n	8000762 <HAL_I2C_Init+0x66>
 80007e6:	2301      	movs	r3, #1
 80007e8:	e7bb      	b.n	8000762 <HAL_I2C_Init+0x66>
 80007ea:	bf00      	nop
 80007ec:	000186a0 	.word	0x000186a0
 80007f0:	001e847f 	.word	0x001e847f
 80007f4:	000f4240 	.word	0x000f4240
 80007f8:	003d08ff 	.word	0x003d08ff

080007fc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007fc:	6803      	ldr	r3, [r0, #0]
{
 80007fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000802:	07db      	lsls	r3, r3, #31
{
 8000804:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000806:	d410      	bmi.n	800082a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000808:	682b      	ldr	r3, [r5, #0]
 800080a:	079f      	lsls	r7, r3, #30
 800080c:	d45e      	bmi.n	80008cc <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800080e:	682b      	ldr	r3, [r5, #0]
 8000810:	0719      	lsls	r1, r3, #28
 8000812:	f100 8095 	bmi.w	8000940 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000816:	682b      	ldr	r3, [r5, #0]
 8000818:	075a      	lsls	r2, r3, #29
 800081a:	f100 80bf 	bmi.w	800099c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800081e:	69ea      	ldr	r2, [r5, #28]
 8000820:	2a00      	cmp	r2, #0
 8000822:	f040 812d 	bne.w	8000a80 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000826:	2000      	movs	r0, #0
 8000828:	e014      	b.n	8000854 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800082a:	4c90      	ldr	r4, [pc, #576]	; (8000a6c <HAL_RCC_OscConfig+0x270>)
 800082c:	6863      	ldr	r3, [r4, #4]
 800082e:	f003 030c 	and.w	r3, r3, #12
 8000832:	2b04      	cmp	r3, #4
 8000834:	d007      	beq.n	8000846 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000836:	6863      	ldr	r3, [r4, #4]
 8000838:	f003 030c 	and.w	r3, r3, #12
 800083c:	2b08      	cmp	r3, #8
 800083e:	d10c      	bne.n	800085a <HAL_RCC_OscConfig+0x5e>
 8000840:	6863      	ldr	r3, [r4, #4]
 8000842:	03de      	lsls	r6, r3, #15
 8000844:	d509      	bpl.n	800085a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000846:	6823      	ldr	r3, [r4, #0]
 8000848:	039c      	lsls	r4, r3, #14
 800084a:	d5dd      	bpl.n	8000808 <HAL_RCC_OscConfig+0xc>
 800084c:	686b      	ldr	r3, [r5, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1da      	bne.n	8000808 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000852:	2001      	movs	r0, #1
}
 8000854:	b002      	add	sp, #8
 8000856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800085a:	686b      	ldr	r3, [r5, #4]
 800085c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000860:	d110      	bne.n	8000884 <HAL_RCC_OscConfig+0x88>
 8000862:	6823      	ldr	r3, [r4, #0]
 8000864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000868:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800086a:	f7ff fcb1 	bl	80001d0 <HAL_GetTick>
 800086e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	0398      	lsls	r0, r3, #14
 8000874:	d4c8      	bmi.n	8000808 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000876:	f7ff fcab 	bl	80001d0 <HAL_GetTick>
 800087a:	1b80      	subs	r0, r0, r6
 800087c:	2864      	cmp	r0, #100	; 0x64
 800087e:	d9f7      	bls.n	8000870 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000880:	2003      	movs	r0, #3
 8000882:	e7e7      	b.n	8000854 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000884:	b99b      	cbnz	r3, 80008ae <HAL_RCC_OscConfig+0xb2>
 8000886:	6823      	ldr	r3, [r4, #0]
 8000888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800088c:	6023      	str	r3, [r4, #0]
 800088e:	6823      	ldr	r3, [r4, #0]
 8000890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000894:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000896:	f7ff fc9b 	bl	80001d0 <HAL_GetTick>
 800089a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	0399      	lsls	r1, r3, #14
 80008a0:	d5b2      	bpl.n	8000808 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008a2:	f7ff fc95 	bl	80001d0 <HAL_GetTick>
 80008a6:	1b80      	subs	r0, r0, r6
 80008a8:	2864      	cmp	r0, #100	; 0x64
 80008aa:	d9f7      	bls.n	800089c <HAL_RCC_OscConfig+0xa0>
 80008ac:	e7e8      	b.n	8000880 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008b2:	6823      	ldr	r3, [r4, #0]
 80008b4:	d103      	bne.n	80008be <HAL_RCC_OscConfig+0xc2>
 80008b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ba:	6023      	str	r3, [r4, #0]
 80008bc:	e7d1      	b.n	8000862 <HAL_RCC_OscConfig+0x66>
 80008be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008c2:	6023      	str	r3, [r4, #0]
 80008c4:	6823      	ldr	r3, [r4, #0]
 80008c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ca:	e7cd      	b.n	8000868 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008cc:	4c67      	ldr	r4, [pc, #412]	; (8000a6c <HAL_RCC_OscConfig+0x270>)
 80008ce:	6863      	ldr	r3, [r4, #4]
 80008d0:	f013 0f0c 	tst.w	r3, #12
 80008d4:	d007      	beq.n	80008e6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008d6:	6863      	ldr	r3, [r4, #4]
 80008d8:	f003 030c 	and.w	r3, r3, #12
 80008dc:	2b08      	cmp	r3, #8
 80008de:	d110      	bne.n	8000902 <HAL_RCC_OscConfig+0x106>
 80008e0:	6863      	ldr	r3, [r4, #4]
 80008e2:	03da      	lsls	r2, r3, #15
 80008e4:	d40d      	bmi.n	8000902 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e6:	6823      	ldr	r3, [r4, #0]
 80008e8:	079b      	lsls	r3, r3, #30
 80008ea:	d502      	bpl.n	80008f2 <HAL_RCC_OscConfig+0xf6>
 80008ec:	692b      	ldr	r3, [r5, #16]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d1af      	bne.n	8000852 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008f2:	6823      	ldr	r3, [r4, #0]
 80008f4:	696a      	ldr	r2, [r5, #20]
 80008f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80008fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008fe:	6023      	str	r3, [r4, #0]
 8000900:	e785      	b.n	800080e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000902:	692a      	ldr	r2, [r5, #16]
 8000904:	4b5a      	ldr	r3, [pc, #360]	; (8000a70 <HAL_RCC_OscConfig+0x274>)
 8000906:	b16a      	cbz	r2, 8000924 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000908:	2201      	movs	r2, #1
 800090a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800090c:	f7ff fc60 	bl	80001d0 <HAL_GetTick>
 8000910:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000912:	6823      	ldr	r3, [r4, #0]
 8000914:	079f      	lsls	r7, r3, #30
 8000916:	d4ec      	bmi.n	80008f2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000918:	f7ff fc5a 	bl	80001d0 <HAL_GetTick>
 800091c:	1b80      	subs	r0, r0, r6
 800091e:	2802      	cmp	r0, #2
 8000920:	d9f7      	bls.n	8000912 <HAL_RCC_OscConfig+0x116>
 8000922:	e7ad      	b.n	8000880 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000924:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000926:	f7ff fc53 	bl	80001d0 <HAL_GetTick>
 800092a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800092c:	6823      	ldr	r3, [r4, #0]
 800092e:	0798      	lsls	r0, r3, #30
 8000930:	f57f af6d 	bpl.w	800080e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000934:	f7ff fc4c 	bl	80001d0 <HAL_GetTick>
 8000938:	1b80      	subs	r0, r0, r6
 800093a:	2802      	cmp	r0, #2
 800093c:	d9f6      	bls.n	800092c <HAL_RCC_OscConfig+0x130>
 800093e:	e79f      	b.n	8000880 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000940:	69aa      	ldr	r2, [r5, #24]
 8000942:	4c4a      	ldr	r4, [pc, #296]	; (8000a6c <HAL_RCC_OscConfig+0x270>)
 8000944:	4b4b      	ldr	r3, [pc, #300]	; (8000a74 <HAL_RCC_OscConfig+0x278>)
 8000946:	b1da      	cbz	r2, 8000980 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000948:	2201      	movs	r2, #1
 800094a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800094c:	f7ff fc40 	bl	80001d0 <HAL_GetTick>
 8000950:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000954:	079b      	lsls	r3, r3, #30
 8000956:	d50d      	bpl.n	8000974 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000958:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800095c:	4b46      	ldr	r3, [pc, #280]	; (8000a78 <HAL_RCC_OscConfig+0x27c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	fbb3 f3f2 	udiv	r3, r3, r2
 8000964:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000966:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000968:	9b01      	ldr	r3, [sp, #4]
 800096a:	1e5a      	subs	r2, r3, #1
 800096c:	9201      	str	r2, [sp, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1f9      	bne.n	8000966 <HAL_RCC_OscConfig+0x16a>
 8000972:	e750      	b.n	8000816 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000974:	f7ff fc2c 	bl	80001d0 <HAL_GetTick>
 8000978:	1b80      	subs	r0, r0, r6
 800097a:	2802      	cmp	r0, #2
 800097c:	d9e9      	bls.n	8000952 <HAL_RCC_OscConfig+0x156>
 800097e:	e77f      	b.n	8000880 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000980:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000982:	f7ff fc25 	bl	80001d0 <HAL_GetTick>
 8000986:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800098a:	079f      	lsls	r7, r3, #30
 800098c:	f57f af43 	bpl.w	8000816 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000990:	f7ff fc1e 	bl	80001d0 <HAL_GetTick>
 8000994:	1b80      	subs	r0, r0, r6
 8000996:	2802      	cmp	r0, #2
 8000998:	d9f6      	bls.n	8000988 <HAL_RCC_OscConfig+0x18c>
 800099a:	e771      	b.n	8000880 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800099c:	4c33      	ldr	r4, [pc, #204]	; (8000a6c <HAL_RCC_OscConfig+0x270>)
 800099e:	69e3      	ldr	r3, [r4, #28]
 80009a0:	00d8      	lsls	r0, r3, #3
 80009a2:	d424      	bmi.n	80009ee <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80009a4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	69e3      	ldr	r3, [r4, #28]
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	61e3      	str	r3, [r4, #28]
 80009ae:	69e3      	ldr	r3, [r4, #28]
 80009b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009b8:	4e30      	ldr	r6, [pc, #192]	; (8000a7c <HAL_RCC_OscConfig+0x280>)
 80009ba:	6833      	ldr	r3, [r6, #0]
 80009bc:	05d9      	lsls	r1, r3, #23
 80009be:	d518      	bpl.n	80009f2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009c0:	68eb      	ldr	r3, [r5, #12]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d126      	bne.n	8000a14 <HAL_RCC_OscConfig+0x218>
 80009c6:	6a23      	ldr	r3, [r4, #32]
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80009ce:	f7ff fbff 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009d2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80009d6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009d8:	6a23      	ldr	r3, [r4, #32]
 80009da:	079b      	lsls	r3, r3, #30
 80009dc:	d53f      	bpl.n	8000a5e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80009de:	2f00      	cmp	r7, #0
 80009e0:	f43f af1d 	beq.w	800081e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009e4:	69e3      	ldr	r3, [r4, #28]
 80009e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009ea:	61e3      	str	r3, [r4, #28]
 80009ec:	e717      	b.n	800081e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80009ee:	2700      	movs	r7, #0
 80009f0:	e7e2      	b.n	80009b8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009f2:	6833      	ldr	r3, [r6, #0]
 80009f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80009fa:	f7ff fbe9 	bl	80001d0 <HAL_GetTick>
 80009fe:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a00:	6833      	ldr	r3, [r6, #0]
 8000a02:	05da      	lsls	r2, r3, #23
 8000a04:	d4dc      	bmi.n	80009c0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a06:	f7ff fbe3 	bl	80001d0 <HAL_GetTick>
 8000a0a:	eba0 0008 	sub.w	r0, r0, r8
 8000a0e:	2864      	cmp	r0, #100	; 0x64
 8000a10:	d9f6      	bls.n	8000a00 <HAL_RCC_OscConfig+0x204>
 8000a12:	e735      	b.n	8000880 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a14:	b9ab      	cbnz	r3, 8000a42 <HAL_RCC_OscConfig+0x246>
 8000a16:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a18:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a1c:	f023 0301 	bic.w	r3, r3, #1
 8000a20:	6223      	str	r3, [r4, #32]
 8000a22:	6a23      	ldr	r3, [r4, #32]
 8000a24:	f023 0304 	bic.w	r3, r3, #4
 8000a28:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a2a:	f7ff fbd1 	bl	80001d0 <HAL_GetTick>
 8000a2e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a30:	6a23      	ldr	r3, [r4, #32]
 8000a32:	0798      	lsls	r0, r3, #30
 8000a34:	d5d3      	bpl.n	80009de <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a36:	f7ff fbcb 	bl	80001d0 <HAL_GetTick>
 8000a3a:	1b80      	subs	r0, r0, r6
 8000a3c:	4540      	cmp	r0, r8
 8000a3e:	d9f7      	bls.n	8000a30 <HAL_RCC_OscConfig+0x234>
 8000a40:	e71e      	b.n	8000880 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a42:	2b05      	cmp	r3, #5
 8000a44:	6a23      	ldr	r3, [r4, #32]
 8000a46:	d103      	bne.n	8000a50 <HAL_RCC_OscConfig+0x254>
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6223      	str	r3, [r4, #32]
 8000a4e:	e7ba      	b.n	80009c6 <HAL_RCC_OscConfig+0x1ca>
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	6223      	str	r3, [r4, #32]
 8000a56:	6a23      	ldr	r3, [r4, #32]
 8000a58:	f023 0304 	bic.w	r3, r3, #4
 8000a5c:	e7b6      	b.n	80009cc <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a5e:	f7ff fbb7 	bl	80001d0 <HAL_GetTick>
 8000a62:	eba0 0008 	sub.w	r0, r0, r8
 8000a66:	42b0      	cmp	r0, r6
 8000a68:	d9b6      	bls.n	80009d8 <HAL_RCC_OscConfig+0x1dc>
 8000a6a:	e709      	b.n	8000880 <HAL_RCC_OscConfig+0x84>
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	42420000 	.word	0x42420000
 8000a74:	42420480 	.word	0x42420480
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a80:	4c22      	ldr	r4, [pc, #136]	; (8000b0c <HAL_RCC_OscConfig+0x310>)
 8000a82:	6863      	ldr	r3, [r4, #4]
 8000a84:	f003 030c 	and.w	r3, r3, #12
 8000a88:	2b08      	cmp	r3, #8
 8000a8a:	f43f aee2 	beq.w	8000852 <HAL_RCC_OscConfig+0x56>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	4e1f      	ldr	r6, [pc, #124]	; (8000b10 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a92:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a94:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a96:	d12b      	bne.n	8000af0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000a98:	f7ff fb9a 	bl	80001d0 <HAL_GetTick>
 8000a9c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a9e:	6823      	ldr	r3, [r4, #0]
 8000aa0:	0199      	lsls	r1, r3, #6
 8000aa2:	d41f      	bmi.n	8000ae4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000aa4:	6a2b      	ldr	r3, [r5, #32]
 8000aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aaa:	d105      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000aac:	6862      	ldr	r2, [r4, #4]
 8000aae:	68a9      	ldr	r1, [r5, #8]
 8000ab0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ab8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000aba:	6862      	ldr	r2, [r4, #4]
 8000abc:	430b      	orrs	r3, r1
 8000abe:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000aca:	f7ff fb81 	bl	80001d0 <HAL_GetTick>
 8000ace:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ad0:	6823      	ldr	r3, [r4, #0]
 8000ad2:	019a      	lsls	r2, r3, #6
 8000ad4:	f53f aea7 	bmi.w	8000826 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ad8:	f7ff fb7a 	bl	80001d0 <HAL_GetTick>
 8000adc:	1b40      	subs	r0, r0, r5
 8000ade:	2802      	cmp	r0, #2
 8000ae0:	d9f6      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x2d4>
 8000ae2:	e6cd      	b.n	8000880 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae4:	f7ff fb74 	bl	80001d0 <HAL_GetTick>
 8000ae8:	1bc0      	subs	r0, r0, r7
 8000aea:	2802      	cmp	r0, #2
 8000aec:	d9d7      	bls.n	8000a9e <HAL_RCC_OscConfig+0x2a2>
 8000aee:	e6c7      	b.n	8000880 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000af0:	f7ff fb6e 	bl	80001d0 <HAL_GetTick>
 8000af4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	019b      	lsls	r3, r3, #6
 8000afa:	f57f ae94 	bpl.w	8000826 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000afe:	f7ff fb67 	bl	80001d0 <HAL_GetTick>
 8000b02:	1b40      	subs	r0, r0, r5
 8000b04:	2802      	cmp	r0, #2
 8000b06:	d9f6      	bls.n	8000af6 <HAL_RCC_OscConfig+0x2fa>
 8000b08:	e6ba      	b.n	8000880 <HAL_RCC_OscConfig+0x84>
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	42420060 	.word	0x42420060

08000b14 <HAL_RCC_GetSysClockFreq>:
{
 8000b14:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000b18:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b1a:	ac02      	add	r4, sp, #8
 8000b1c:	f103 0510 	add.w	r5, r3, #16
 8000b20:	4622      	mov	r2, r4
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	6859      	ldr	r1, [r3, #4]
 8000b26:	3308      	adds	r3, #8
 8000b28:	c203      	stmia	r2!, {r0, r1}
 8000b2a:	42ab      	cmp	r3, r5
 8000b2c:	4614      	mov	r4, r2
 8000b2e:	d1f7      	bne.n	8000b20 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b30:	2301      	movs	r3, #1
 8000b32:	f88d 3004 	strb.w	r3, [sp, #4]
 8000b36:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000b38:	4911      	ldr	r1, [pc, #68]	; (8000b80 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b3a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000b3e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000b40:	f003 020c 	and.w	r2, r3, #12
 8000b44:	2a08      	cmp	r2, #8
 8000b46:	d117      	bne.n	8000b78 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b48:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000b4c:	a806      	add	r0, sp, #24
 8000b4e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b50:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b52:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b56:	d50c      	bpl.n	8000b72 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b58:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b5c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b60:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b62:	aa06      	add	r2, sp, #24
 8000b64:	4413      	add	r3, r2
 8000b66:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b6a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000b6e:	b007      	add	sp, #28
 8000b70:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <HAL_RCC_GetSysClockFreq+0x74>)
 8000b74:	4350      	muls	r0, r2
 8000b76:	e7fa      	b.n	8000b6e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000b7a:	e7f8      	b.n	8000b6e <HAL_RCC_GetSysClockFreq+0x5a>
 8000b7c:	0800144c 	.word	0x0800144c
 8000b80:	40021000 	.word	0x40021000
 8000b84:	007a1200 	.word	0x007a1200
 8000b88:	003d0900 	.word	0x003d0900

08000b8c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b8c:	4a4d      	ldr	r2, [pc, #308]	; (8000cc4 <HAL_RCC_ClockConfig+0x138>)
{
 8000b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b92:	6813      	ldr	r3, [r2, #0]
{
 8000b94:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	428b      	cmp	r3, r1
{
 8000b9c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b9e:	d328      	bcc.n	8000bf2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ba0:	682a      	ldr	r2, [r5, #0]
 8000ba2:	0791      	lsls	r1, r2, #30
 8000ba4:	d432      	bmi.n	8000c0c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ba6:	07d2      	lsls	r2, r2, #31
 8000ba8:	d438      	bmi.n	8000c1c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000baa:	4a46      	ldr	r2, [pc, #280]	; (8000cc4 <HAL_RCC_ClockConfig+0x138>)
 8000bac:	6813      	ldr	r3, [r2, #0]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	429e      	cmp	r6, r3
 8000bb4:	d373      	bcc.n	8000c9e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bb6:	682a      	ldr	r2, [r5, #0]
 8000bb8:	4c43      	ldr	r4, [pc, #268]	; (8000cc8 <HAL_RCC_ClockConfig+0x13c>)
 8000bba:	f012 0f04 	tst.w	r2, #4
 8000bbe:	d179      	bne.n	8000cb4 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bc0:	0713      	lsls	r3, r2, #28
 8000bc2:	d506      	bpl.n	8000bd2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000bc4:	6863      	ldr	r3, [r4, #4]
 8000bc6:	692a      	ldr	r2, [r5, #16]
 8000bc8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000bcc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bd0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bd2:	f7ff ff9f 	bl	8000b14 <HAL_RCC_GetSysClockFreq>
 8000bd6:	6863      	ldr	r3, [r4, #4]
 8000bd8:	4a3c      	ldr	r2, [pc, #240]	; (8000ccc <HAL_RCC_ClockConfig+0x140>)
 8000bda:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bde:	5cd3      	ldrb	r3, [r2, r3]
 8000be0:	40d8      	lsrs	r0, r3
 8000be2:	4b3b      	ldr	r3, [pc, #236]	; (8000cd0 <HAL_RCC_ClockConfig+0x144>)
 8000be4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff fab0 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000bec:	2000      	movs	r0, #0
}
 8000bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bf2:	6813      	ldr	r3, [r2, #0]
 8000bf4:	f023 0307 	bic.w	r3, r3, #7
 8000bf8:	430b      	orrs	r3, r1
 8000bfa:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bfc:	6813      	ldr	r3, [r2, #0]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	4299      	cmp	r1, r3
 8000c04:	d0cc      	beq.n	8000ba0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000c06:	2001      	movs	r0, #1
 8000c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c0c:	492e      	ldr	r1, [pc, #184]	; (8000cc8 <HAL_RCC_ClockConfig+0x13c>)
 8000c0e:	68a8      	ldr	r0, [r5, #8]
 8000c10:	684b      	ldr	r3, [r1, #4]
 8000c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c16:	4303      	orrs	r3, r0
 8000c18:	604b      	str	r3, [r1, #4]
 8000c1a:	e7c4      	b.n	8000ba6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c1c:	686a      	ldr	r2, [r5, #4]
 8000c1e:	4c2a      	ldr	r4, [pc, #168]	; (8000cc8 <HAL_RCC_ClockConfig+0x13c>)
 8000c20:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c22:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c24:	d11c      	bne.n	8000c60 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c2a:	d0ec      	beq.n	8000c06 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c2c:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c2e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c32:	f023 0303 	bic.w	r3, r3, #3
 8000c36:	4313      	orrs	r3, r2
 8000c38:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000c3a:	f7ff fac9 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c3e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000c40:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d114      	bne.n	8000c70 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c46:	6863      	ldr	r3, [r4, #4]
 8000c48:	f003 030c 	and.w	r3, r3, #12
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d0ac      	beq.n	8000baa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c50:	f7ff fabe 	bl	80001d0 <HAL_GetTick>
 8000c54:	1bc0      	subs	r0, r0, r7
 8000c56:	4540      	cmp	r0, r8
 8000c58:	d9f5      	bls.n	8000c46 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c60:	2a02      	cmp	r2, #2
 8000c62:	d102      	bne.n	8000c6a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c68:	e7df      	b.n	8000c2a <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6a:	f013 0f02 	tst.w	r3, #2
 8000c6e:	e7dc      	b.n	8000c2a <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d10f      	bne.n	8000c94 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c74:	6863      	ldr	r3, [r4, #4]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d095      	beq.n	8000baa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c7e:	f7ff faa7 	bl	80001d0 <HAL_GetTick>
 8000c82:	1bc0      	subs	r0, r0, r7
 8000c84:	4540      	cmp	r0, r8
 8000c86:	d9f5      	bls.n	8000c74 <HAL_RCC_ClockConfig+0xe8>
 8000c88:	e7e7      	b.n	8000c5a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c8a:	f7ff faa1 	bl	80001d0 <HAL_GetTick>
 8000c8e:	1bc0      	subs	r0, r0, r7
 8000c90:	4540      	cmp	r0, r8
 8000c92:	d8e2      	bhi.n	8000c5a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c94:	6863      	ldr	r3, [r4, #4]
 8000c96:	f013 0f0c 	tst.w	r3, #12
 8000c9a:	d1f6      	bne.n	8000c8a <HAL_RCC_ClockConfig+0xfe>
 8000c9c:	e785      	b.n	8000baa <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c9e:	6813      	ldr	r3, [r2, #0]
 8000ca0:	f023 0307 	bic.w	r3, r3, #7
 8000ca4:	4333      	orrs	r3, r6
 8000ca6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ca8:	6813      	ldr	r3, [r2, #0]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	d1a9      	bne.n	8000c06 <HAL_RCC_ClockConfig+0x7a>
 8000cb2:	e780      	b.n	8000bb6 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cb4:	6863      	ldr	r3, [r4, #4]
 8000cb6:	68e9      	ldr	r1, [r5, #12]
 8000cb8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cbc:	430b      	orrs	r3, r1
 8000cbe:	6063      	str	r3, [r4, #4]
 8000cc0:	e77e      	b.n	8000bc0 <HAL_RCC_ClockConfig+0x34>
 8000cc2:	bf00      	nop
 8000cc4:	40022000 	.word	0x40022000
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	0800145c 	.word	0x0800145c
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <HAL_RCC_GetHCLKFreq>:
}
 8000cd4:	4b01      	ldr	r3, [pc, #4]	; (8000cdc <HAL_RCC_GetHCLKFreq+0x8>)
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000cea:	5cd3      	ldrb	r3, [r2, r3]
 8000cec:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000cee:	6810      	ldr	r0, [r2, #0]
}    
 8000cf0:	40d8      	lsrs	r0, r3
 8000cf2:	4770      	bx	lr
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	0800146c 	.word	0x0800146c
 8000cfc:	20000008 	.word	0x20000008

08000d00 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000d0a:	5cd3      	ldrb	r3, [r2, r3]
 8000d0c:	4a03      	ldr	r2, [pc, #12]	; (8000d1c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d0e:	6810      	ldr	r0, [r2, #0]
} 
 8000d10:	40d8      	lsrs	r0, r3
 8000d12:	4770      	bx	lr
 8000d14:	40021000 	.word	0x40021000
 8000d18:	0800146c 	.word	0x0800146c
 8000d1c:	20000008 	.word	0x20000008

08000d20 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000d20:	6803      	ldr	r3, [r0, #0]
{
 8000d22:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000d26:	07d9      	lsls	r1, r3, #31
{
 8000d28:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000d2a:	d520      	bpl.n	8000d6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d2c:	4c35      	ldr	r4, [pc, #212]	; (8000e04 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000d2e:	69e3      	ldr	r3, [r4, #28]
 8000d30:	00da      	lsls	r2, r3, #3
 8000d32:	d432      	bmi.n	8000d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000d34:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	69e3      	ldr	r3, [r4, #28]
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	61e3      	str	r3, [r4, #28]
 8000d3e:	69e3      	ldr	r3, [r4, #28]
 8000d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d48:	4e2f      	ldr	r6, [pc, #188]	; (8000e08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000d4a:	6833      	ldr	r3, [r6, #0]
 8000d4c:	05db      	lsls	r3, r3, #23
 8000d4e:	d526      	bpl.n	8000d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000d50:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d52:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000d56:	d136      	bne.n	8000dc6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000d58:	6a23      	ldr	r3, [r4, #32]
 8000d5a:	686a      	ldr	r2, [r5, #4]
 8000d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d60:	4313      	orrs	r3, r2
 8000d62:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000d64:	b11f      	cbz	r7, 8000d6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d66:	69e3      	ldr	r3, [r4, #28]
 8000d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000d6e:	6828      	ldr	r0, [r5, #0]
 8000d70:	0783      	lsls	r3, r0, #30
 8000d72:	d506      	bpl.n	8000d82 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000d74:	4a23      	ldr	r2, [pc, #140]	; (8000e04 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000d76:	68a9      	ldr	r1, [r5, #8]
 8000d78:	6853      	ldr	r3, [r2, #4]
 8000d7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d7e:	430b      	orrs	r3, r1
 8000d80:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000d82:	f010 0010 	ands.w	r0, r0, #16
 8000d86:	d01b      	beq.n	8000dc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000d88:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000d8a:	68e9      	ldr	r1, [r5, #12]
 8000d8c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000d8e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000d90:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000d94:	430b      	orrs	r3, r1
 8000d96:	6053      	str	r3, [r2, #4]
 8000d98:	e012      	b.n	8000dc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000d9a:	2700      	movs	r7, #0
 8000d9c:	e7d4      	b.n	8000d48 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d9e:	6833      	ldr	r3, [r6, #0]
 8000da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000da6:	f7ff fa13 	bl	80001d0 <HAL_GetTick>
 8000daa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dac:	6833      	ldr	r3, [r6, #0]
 8000dae:	05d8      	lsls	r0, r3, #23
 8000db0:	d4ce      	bmi.n	8000d50 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000db2:	f7ff fa0d 	bl	80001d0 <HAL_GetTick>
 8000db6:	eba0 0008 	sub.w	r0, r0, r8
 8000dba:	2864      	cmp	r0, #100	; 0x64
 8000dbc:	d9f6      	bls.n	8000dac <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000dbe:	2003      	movs	r0, #3
}
 8000dc0:	b002      	add	sp, #8
 8000dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000dc6:	686a      	ldr	r2, [r5, #4]
 8000dc8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d0c3      	beq.n	8000d58 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000dd4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000dd6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000dd8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000dda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000dde:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000de0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000de2:	07d9      	lsls	r1, r3, #31
 8000de4:	d5b8      	bpl.n	8000d58 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000de6:	f7ff f9f3 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dea:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000dee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000df0:	6a23      	ldr	r3, [r4, #32]
 8000df2:	079a      	lsls	r2, r3, #30
 8000df4:	d4b0      	bmi.n	8000d58 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000df6:	f7ff f9eb 	bl	80001d0 <HAL_GetTick>
 8000dfa:	1b80      	subs	r0, r0, r6
 8000dfc:	4540      	cmp	r0, r8
 8000dfe:	d9f7      	bls.n	8000df0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000e00:	e7dd      	b.n	8000dbe <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40007000 	.word	0x40007000
 8000e0c:	42420440 	.word	0x42420440

08000e10 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e14:	6805      	ldr	r5, [r0, #0]
 8000e16:	68c2      	ldr	r2, [r0, #12]
 8000e18:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e1a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e20:	4313      	orrs	r3, r2
 8000e22:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e24:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000e26:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000e2c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000e30:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e34:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000e36:	4313      	orrs	r3, r2
 8000e38:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e3a:	696b      	ldr	r3, [r5, #20]
 8000e3c:	6982      	ldr	r2, [r0, #24]
 8000e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e42:	4313      	orrs	r3, r2
 8000e44:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000e46:	4b40      	ldr	r3, [pc, #256]	; (8000f48 <UART_SetConfig+0x138>)
{
 8000e48:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000e4a:	429d      	cmp	r5, r3
 8000e4c:	f04f 0419 	mov.w	r4, #25
 8000e50:	d146      	bne.n	8000ee0 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000e52:	f7ff ff55 	bl	8000d00 <HAL_RCC_GetPCLK2Freq>
 8000e56:	fb04 f300 	mul.w	r3, r4, r0
 8000e5a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000e5e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e62:	00b6      	lsls	r6, r6, #2
 8000e64:	fbb3 f3f6 	udiv	r3, r3, r6
 8000e68:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e6c:	011e      	lsls	r6, r3, #4
 8000e6e:	f7ff ff47 	bl	8000d00 <HAL_RCC_GetPCLK2Freq>
 8000e72:	4360      	muls	r0, r4
 8000e74:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e7e:	f7ff ff3f 	bl	8000d00 <HAL_RCC_GetPCLK2Freq>
 8000e82:	4360      	muls	r0, r4
 8000e84:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e8e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e92:	fb08 7313 	mls	r3, r8, r3, r7
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	3332      	adds	r3, #50	; 0x32
 8000e9a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e9e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000ea2:	f7ff ff2d 	bl	8000d00 <HAL_RCC_GetPCLK2Freq>
 8000ea6:	4360      	muls	r0, r4
 8000ea8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	fbb0 faf2 	udiv	sl, r0, r2
 8000eb2:	f7ff ff25 	bl	8000d00 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000eb6:	4360      	muls	r0, r4
 8000eb8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ec2:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ec6:	fb08 a313 	mls	r3, r8, r3, sl
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	3332      	adds	r3, #50	; 0x32
 8000ece:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	433b      	orrs	r3, r7
 8000ed8:	4433      	add	r3, r6
 8000eda:	60ab      	str	r3, [r5, #8]
 8000edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee0:	f7ff fefe 	bl	8000ce0 <HAL_RCC_GetPCLK1Freq>
 8000ee4:	fb04 f300 	mul.w	r3, r4, r0
 8000ee8:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000eec:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ef0:	00b6      	lsls	r6, r6, #2
 8000ef2:	fbb3 f3f6 	udiv	r3, r3, r6
 8000ef6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000efa:	011e      	lsls	r6, r3, #4
 8000efc:	f7ff fef0 	bl	8000ce0 <HAL_RCC_GetPCLK1Freq>
 8000f00:	4360      	muls	r0, r4
 8000f02:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f0c:	f7ff fee8 	bl	8000ce0 <HAL_RCC_GetPCLK1Freq>
 8000f10:	4360      	muls	r0, r4
 8000f12:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f1c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f20:	fb08 7313 	mls	r3, r8, r3, r7
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	3332      	adds	r3, #50	; 0x32
 8000f28:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f2c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000f30:	f7ff fed6 	bl	8000ce0 <HAL_RCC_GetPCLK1Freq>
 8000f34:	4360      	muls	r0, r4
 8000f36:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	fbb0 faf2 	udiv	sl, r0, r2
 8000f40:	f7ff fece 	bl	8000ce0 <HAL_RCC_GetPCLK1Freq>
 8000f44:	e7b7      	b.n	8000eb6 <UART_SetConfig+0xa6>
 8000f46:	bf00      	nop
 8000f48:	40013800 	.word	0x40013800

08000f4c <HAL_UART_Init>:
{
 8000f4c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000f4e:	4604      	mov	r4, r0
 8000f50:	b340      	cbz	r0, 8000fa4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000f52:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f5a:	b91b      	cbnz	r3, 8000f64 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000f5c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000f60:	f000 f9bc 	bl	80012dc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000f64:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000f66:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f68:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000f6c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f6e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000f70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f74:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f76:	f7ff ff4b 	bl	8000e10 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f7a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f7c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f86:	695a      	ldr	r2, [r3, #20]
 8000f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f8c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f94:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000f96:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f98:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000f9a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000f9e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000fa2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fa4:	2001      	movs	r0, #1
}
 8000fa6:	bd10      	pop	{r4, pc}

08000fa8 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8000fac:	b510      	push	{r4, lr}
 8000fae:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb0:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fb4:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fc2:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fc8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f7ff fc17 	bl	80007fc <HAL_RCC_OscConfig>
 8000fce:	b100      	cbz	r0, 8000fd2 <SystemClock_Config+0x2a>
 8000fd0:	e7fe      	b.n	8000fd0 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fdc:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fde:	4621      	mov	r1, r4
 8000fe0:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe2:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe4:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe6:	f7ff fdd1 	bl	8000b8c <HAL_RCC_ClockConfig>
 8000fea:	b100      	cbz	r0, 8000fee <SystemClock_Config+0x46>
 8000fec:	e7fe      	b.n	8000fec <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ff4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ff6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff8:	f7ff fe92 	bl	8000d20 <HAL_RCCEx_PeriphCLKConfig>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	b100      	cbz	r0, 8001002 <SystemClock_Config+0x5a>
 8001000:	e7fe      	b.n	8001000 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001002:	f7ff fe67 	bl	8000cd4 <HAL_RCC_GetHCLKFreq>
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	fbb0 f0f3 	udiv	r0, r0, r3
 800100e:	f7ff fa63 	bl	80004d8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001012:	2004      	movs	r0, #4
 8001014:	f7ff fa76 	bl	8000504 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001018:	4622      	mov	r2, r4
 800101a:	4621      	mov	r1, r4
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff fa26 	bl	8000470 <HAL_NVIC_SetPriority>
}
 8001024:	b014      	add	sp, #80	; 0x50
 8001026:	bd10      	pop	{r4, pc}

08001028 <main>:
{
 8001028:	b500      	push	{lr}
 800102a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800102c:	f7ff f8b2 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001030:	f7ff ffba 	bl	8000fa8 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	4b47      	ldr	r3, [pc, #284]	; (8001154 <main+0x12c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_RESET);
 8001036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_RESET);
 800103c:	4846      	ldr	r0, [pc, #280]	; (8001158 <main+0x130>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	f042 0210 	orr.w	r2, r2, #16
 8001042:	619a      	str	r2, [r3, #24]
 8001044:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : LED_PC13_Pin */
  GPIO_InitStruct.Pin = LED_PC13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001048:	f002 0210 	and.w	r2, r2, #16
 800104c:	9200      	str	r2, [sp, #0]
 800104e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001050:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001054:	f042 0220 	orr.w	r2, r2, #32
 8001058:	619a      	str	r2, [r3, #24]
 800105a:	699a      	ldr	r2, [r3, #24]
 800105c:	f002 0220 	and.w	r2, r2, #32
 8001060:	9201      	str	r2, [sp, #4]
 8001062:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	699a      	ldr	r2, [r3, #24]
 8001066:	f042 0204 	orr.w	r2, r2, #4
 800106a:	619a      	str	r2, [r3, #24]
 800106c:	699a      	ldr	r2, [r3, #24]
 800106e:	f002 0204 	and.w	r2, r2, #4
 8001072:	9202      	str	r2, [sp, #8]
 8001074:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	699a      	ldr	r2, [r3, #24]
 8001078:	f042 0208 	orr.w	r2, r2, #8
 800107c:	619a      	str	r2, [r3, #24]
 800107e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	9303      	str	r3, [sp, #12]
 8001088:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_PC13_GPIO_Port, LED_PC13_Pin, GPIO_PIN_RESET);
 800108a:	f7ff fb2d 	bl	80006e8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_PC13_Pin;
 800108e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001092:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_PC13_GPIO_Port, &GPIO_InitStruct);
 8001096:	4830      	ldr	r0, [pc, #192]	; (8001158 <main+0x130>)
 8001098:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_PC13_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f7ff fa42 	bl	8000528 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 80010a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 80010a8:	482c      	ldr	r0, [pc, #176]	; (800115c <main+0x134>)
  huart1.Init.BaudRate = 115200;
 80010aa:	4a2d      	ldr	r2, [pc, #180]	; (8001160 <main+0x138>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ac:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 80010ae:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b2:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b4:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010b6:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b8:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010be:	f7ff ff45 	bl	8000f4c <HAL_UART_Init>
 80010c2:	b100      	cbz	r0, 80010c6 <main+0x9e>
 80010c4:	e7fe      	b.n	80010c4 <main+0x9c>
  hadc1.Instance = ADC1;
 80010c6:	4c27      	ldr	r4, [pc, #156]	; (8001164 <main+0x13c>)
 80010c8:	4b27      	ldr	r3, [pc, #156]	; (8001168 <main+0x140>)
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ca:	60a0      	str	r0, [r4, #8]
  hadc1.Instance = ADC1;
 80010cc:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ce:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010d2:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d4:	6160      	str	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d6:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d8:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010da:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 80010dc:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010de:	f7ff f935 	bl	800034c <HAL_ADC_Init>
 80010e2:	b100      	cbz	r0, 80010e6 <main+0xbe>
 80010e4:	e7fe      	b.n	80010e4 <main+0xbc>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010e6:	9006      	str	r0, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e8:	a904      	add	r1, sp, #16
 80010ea:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80010ec:	9504      	str	r5, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ee:	9505      	str	r5, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f0:	f7ff f886 	bl	8000200 <HAL_ADC_ConfigChannel>
 80010f4:	b100      	cbz	r0, 80010f8 <main+0xd0>
 80010f6:	e7fe      	b.n	80010f6 <main+0xce>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <main+0x144>)
  hi2c1.Init.ClockSpeed = 100000;
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <main+0x148>)
 8001100:	4d1c      	ldr	r5, [pc, #112]	; (8001174 <main+0x14c>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001102:	6098      	str	r0, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001104:	60d8      	str	r0, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001106:	6158      	str	r0, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001108:	6198      	str	r0, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110a:	61d8      	str	r0, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110c:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110e:	4618      	mov	r0, r3
  hi2c1.Init.ClockSpeed = 100000;
 8001110:	e883 0024 	stmia.w	r3, {r2, r5}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001114:	611c      	str	r4, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001116:	f7ff faf1 	bl	80006fc <HAL_I2C_Init>
 800111a:	b100      	cbz	r0, 800111e <main+0xf6>
 800111c:	e7fe      	b.n	800111c <main+0xf4>
  hi2c2.Instance = I2C2;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <main+0x150>)
 8001120:	4a16      	ldr	r2, [pc, #88]	; (800117c <main+0x154>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001122:	6098      	str	r0, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001124:	60d8      	str	r0, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001126:	6158      	str	r0, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001128:	6198      	str	r0, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800112a:	61d8      	str	r0, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112c:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800112e:	4618      	mov	r0, r3
  hi2c2.Init.ClockSpeed = 100000;
 8001130:	e883 0024 	stmia.w	r3, {r2, r5}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001134:	611c      	str	r4, [r3, #16]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001136:	f7ff fae1 	bl	80006fc <HAL_I2C_Init>
 800113a:	b948      	cbnz	r0, 8001150 <main+0x128>
	  HAL_GPIO_TogglePin(LED_PC13_GPIO_Port, LED_PC13_Pin);
 800113c:	4c06      	ldr	r4, [pc, #24]	; (8001158 <main+0x130>)
 800113e:	4620      	mov	r0, r4
 8001140:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001144:	f7ff fad5 	bl	80006f2 <HAL_GPIO_TogglePin>
	  HAL_Delay(15);
 8001148:	200f      	movs	r0, #15
 800114a:	f7ff f847 	bl	80001dc <HAL_Delay>
 800114e:	e7f6      	b.n	800113e <main+0x116>
 8001150:	e7fe      	b.n	8001150 <main+0x128>
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000
 8001158:	40011000 	.word	0x40011000
 800115c:	20000104 	.word	0x20000104
 8001160:	40013800 	.word	0x40013800
 8001164:	200000d4 	.word	0x200000d4
 8001168:	40012400 	.word	0x40012400
 800116c:	2000002c 	.word	0x2000002c
 8001170:	40005400 	.word	0x40005400
 8001174:	000186a0 	.word	0x000186a0
 8001178:	20000080 	.word	0x20000080
 800117c:	40005800 	.word	0x40005800

08001180 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_MspInit+0x98>)
{
 8001182:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001184:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001186:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001188:	f042 0201 	orr.w	r2, r2, #1
 800118c:	619a      	str	r2, [r3, #24]
 800118e:	699a      	ldr	r2, [r3, #24]
 8001190:	f002 0201 	and.w	r2, r2, #1
 8001194:	9200      	str	r2, [sp, #0]
 8001196:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	69da      	ldr	r2, [r3, #28]
 800119a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800119e:	61da      	str	r2, [r3, #28]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011aa:	f7ff f94f 	bl	800044c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f06f 000b 	mvn.w	r0, #11
 80011b4:	4611      	mov	r1, r2
 80011b6:	f7ff f95b 	bl	8000470 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f06f 000a 	mvn.w	r0, #10
 80011c0:	4611      	mov	r1, r2
 80011c2:	f7ff f955 	bl	8000470 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f06f 0009 	mvn.w	r0, #9
 80011cc:	4611      	mov	r1, r2
 80011ce:	f7ff f94f 	bl	8000470 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f06f 0004 	mvn.w	r0, #4
 80011d8:	4611      	mov	r1, r2
 80011da:	f7ff f949 	bl	8000470 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	f06f 0003 	mvn.w	r0, #3
 80011e4:	4611      	mov	r1, r2
 80011e6:	f7ff f943 	bl	8000470 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f06f 0001 	mvn.w	r0, #1
 80011f0:	4611      	mov	r1, r2
 80011f2:	f7ff f93d 	bl	8000470 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	4611      	mov	r1, r2
 80011fe:	f7ff f937 	bl	8000470 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001202:	4a06      	ldr	r2, [pc, #24]	; (800121c <HAL_MspInit+0x9c>)
 8001204:	6853      	ldr	r3, [r2, #4]
 8001206:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800120a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800120e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001210:	b003      	add	sp, #12
 8001212:	f85d fb04 	ldr.w	pc, [sp], #4
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000
 800121c:	40010000 	.word	0x40010000

08001220 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001220:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001222:	6802      	ldr	r2, [r0, #0]
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_ADC_MspInit+0x38>)
 8001226:	429a      	cmp	r2, r3
 8001228:	d112      	bne.n	8001250 <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800122a:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800122e:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001236:	619a      	str	r2, [r3, #24]
 8001238:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	4808      	ldr	r0, [pc, #32]	; (800125c <HAL_ADC_MspInit+0x3c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800123c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001244:	2302      	movs	r3, #2
 8001246:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001248:	2303      	movs	r3, #3
 800124a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f7ff f96c 	bl	8000528 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001250:	b007      	add	sp, #28
 8001252:	f85d fb04 	ldr.w	pc, [sp], #4
 8001256:	bf00      	nop
 8001258:	40012400 	.word	0x40012400
 800125c:	40010800 	.word	0x40010800

08001260 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001260:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8001262:	6803      	ldr	r3, [r0, #0]
 8001264:	4a19      	ldr	r2, [pc, #100]	; (80012cc <HAL_I2C_MspInit+0x6c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d116      	bne.n	8001298 <HAL_I2C_MspInit+0x38>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800126a:	23c0      	movs	r3, #192	; 0xc0
 800126c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126e:	2312      	movs	r3, #18
 8001270:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001272:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001274:	a902      	add	r1, sp, #8
 8001276:	4816      	ldr	r0, [pc, #88]	; (80012d0 <HAL_I2C_MspInit+0x70>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001278:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f7ff f955 	bl	8000528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_I2C_MspInit+0x74>)
 8001280:	69da      	ldr	r2, [r3, #28]
 8001282:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001286:	61da      	str	r2, [r3, #28]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001292:	b007      	add	sp, #28
 8001294:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(hi2c->Instance==I2C2)
 8001298:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_I2C_MspInit+0x78>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d1f9      	bne.n	8001292 <HAL_I2C_MspInit+0x32>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800129e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012a2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a4:	2312      	movs	r3, #18
 80012a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	a902      	add	r1, sp, #8
 80012ac:	4808      	ldr	r0, [pc, #32]	; (80012d0 <HAL_I2C_MspInit+0x70>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f7ff f93a 	bl	8000528 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <HAL_I2C_MspInit+0x74>)
 80012b6:	69da      	ldr	r2, [r3, #28]
 80012b8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80012bc:	61da      	str	r2, [r3, #28]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	9b01      	ldr	r3, [sp, #4]
}
 80012c8:	e7e3      	b.n	8001292 <HAL_I2C_MspInit+0x32>
 80012ca:	bf00      	nop
 80012cc:	40005400 	.word	0x40005400
 80012d0:	40010c00 	.word	0x40010c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40005800 	.word	0x40005800

080012dc <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80012de:	6802      	ldr	r2, [r0, #0]
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_UART_MspInit+0x50>)
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d11f      	bne.n	8001326 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012e6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80012ea:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012f2:	619a      	str	r2, [r3, #24]
 80012f4:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	480e      	ldr	r0, [pc, #56]	; (8001330 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80012f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001304:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f7ff f90b 	bl	8000528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001316:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	a902      	add	r1, sp, #8
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f7ff f901 	bl	8000528 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001326:	b007      	add	sp, #28
 8001328:	f85d fb04 	ldr.w	pc, [sp], #4
 800132c:	40013800 	.word	0x40013800
 8001330:	40010800 	.word	0x40010800

08001334 <NMI_Handler>:
 8001334:	4770      	bx	lr

08001336 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001336:	e7fe      	b.n	8001336 <HardFault_Handler>

08001338 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler>

0800133a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800133a:	e7fe      	b.n	800133a <BusFault_Handler>

0800133c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800133c:	e7fe      	b.n	800133c <UsageFault_Handler>

0800133e <SVC_Handler>:
 800133e:	4770      	bx	lr

08001340 <DebugMon_Handler>:
 8001340:	4770      	bx	lr

08001342 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001342:	4770      	bx	lr

08001344 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001344:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001346:	f7fe ff37 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800134e:	f7ff b8e6 	b.w	800051e <HAL_SYSTICK_IRQHandler>
	...

08001354 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <SystemInit+0x40>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	f042 0201 	orr.w	r2, r2, #1
 800135c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800135e:	6859      	ldr	r1, [r3, #4]
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <SystemInit+0x44>)
 8001362:	400a      	ands	r2, r1
 8001364:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800136c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001370:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001378:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001380:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001382:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001386:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001388:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <SystemInit+0x48>)
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	f8ff0000 	.word	0xf8ff0000
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013a2:	e003      	b.n	80013ac <LoopCopyDataInit>

080013a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013aa:	3104      	adds	r1, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013ac:	480a      	ldr	r0, [pc, #40]	; (80013d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013b4:	d3f6      	bcc.n	80013a4 <CopyDataInit>
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013b8:	e002      	b.n	80013c0 <LoopFillZerobss>

080013ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013bc:	f842 3b04 	str.w	r3, [r2], #4

080013c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013c4:	d3f9      	bcc.n	80013ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013c6:	f7ff ffc5 	bl	8001354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f000 f80f 	bl	80013ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ce:	f7ff fe2b 	bl	8001028 <main>
  bx lr
 80013d2:	4770      	bx	lr
  ldr r3, =_sidata
 80013d4:	0800147c 	.word	0x0800147c
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80013e0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80013e4:	20000144 	.word	0x20000144

080013e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC1_2_IRQHandler>
	...

080013ec <__libc_init_array>:
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	2500      	movs	r5, #0
 80013f0:	4e0c      	ldr	r6, [pc, #48]	; (8001424 <__libc_init_array+0x38>)
 80013f2:	4c0d      	ldr	r4, [pc, #52]	; (8001428 <__libc_init_array+0x3c>)
 80013f4:	1ba4      	subs	r4, r4, r6
 80013f6:	10a4      	asrs	r4, r4, #2
 80013f8:	42a5      	cmp	r5, r4
 80013fa:	d109      	bne.n	8001410 <__libc_init_array+0x24>
 80013fc:	f000 f81a 	bl	8001434 <_init>
 8001400:	2500      	movs	r5, #0
 8001402:	4e0a      	ldr	r6, [pc, #40]	; (800142c <__libc_init_array+0x40>)
 8001404:	4c0a      	ldr	r4, [pc, #40]	; (8001430 <__libc_init_array+0x44>)
 8001406:	1ba4      	subs	r4, r4, r6
 8001408:	10a4      	asrs	r4, r4, #2
 800140a:	42a5      	cmp	r5, r4
 800140c:	d105      	bne.n	800141a <__libc_init_array+0x2e>
 800140e:	bd70      	pop	{r4, r5, r6, pc}
 8001410:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001414:	4798      	blx	r3
 8001416:	3501      	adds	r5, #1
 8001418:	e7ee      	b.n	80013f8 <__libc_init_array+0xc>
 800141a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800141e:	4798      	blx	r3
 8001420:	3501      	adds	r5, #1
 8001422:	e7f2      	b.n	800140a <__libc_init_array+0x1e>
 8001424:	08001474 	.word	0x08001474
 8001428:	08001474 	.word	0x08001474
 800142c:	08001474 	.word	0x08001474
 8001430:	08001478 	.word	0x08001478

08001434 <_init>:
 8001434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001436:	bf00      	nop
 8001438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800143a:	bc08      	pop	{r3}
 800143c:	469e      	mov	lr, r3
 800143e:	4770      	bx	lr

08001440 <_fini>:
 8001440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001442:	bf00      	nop
 8001444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001446:	bc08      	pop	{r3}
 8001448:	469e      	mov	lr, r3
 800144a:	4770      	bx	lr
